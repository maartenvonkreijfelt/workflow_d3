!function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(i,r,function(e){return t[e]}.bind(null,r));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/assets/",n(n.s=0)}([function(t,e,n){t.exports=n(6)},function(t,e,n){var i=n(2);"string"==typeof i&&(i=[[t.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(4)(i,r);i.locals&&(t.exports=i.locals)},function(t,e,n){(t.exports=n(3)(!1)).push([t.i,"\n",""])},function(t,e,n){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map(function(e){var n=function(t,e){var n=t[1]||"",i=t[3];if(!i)return n;if(e&&"function"==typeof btoa){var r=(f=i,o=btoa(unescape(encodeURIComponent(JSON.stringify(f)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(c," */")),a=i.sources.map(function(t){return"/*# sourceURL=".concat(i.sourceRoot).concat(t," */")});return[n].concat(a).concat([r]).join("\n")}var f,o,c;return[n].join("\n")}(e,t);return e[2]?"@media ".concat(e[2],"{").concat(n,"}"):n}).join("")},e.i=function(t,n){"string"==typeof t&&(t=[[null,t,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];null!=a&&(i[a]=!0)}for(var f=0;f<t.length;f++){var o=t[f];null!=o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="(".concat(o[2],") and (").concat(n,")")),e.push(o))}},e}},function(t,e,n){var i,r,a={},f=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),o=function(t){var e={};return function(t,n){if("function"==typeof t)return t();if(void 0===e[t]){var i=function(t,e){return e?e.querySelector(t):document.querySelector(t)}.call(this,t,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}e[t]=i}return e[t]}}(),c=null,s=0,u=[],h=n(5);function l(t,e){for(var n=0;n<t.length;n++){var i=t[n],r=a[i.id];if(r){r.refs++;for(var f=0;f<r.parts.length;f++)r.parts[f](i.parts[f]);for(;f<i.parts.length;f++)r.parts.push(v(i.parts[f],e))}else{var o=[];for(f=0;f<i.parts.length;f++)o.push(v(i.parts[f],e));a[i.id]={id:i.id,refs:1,parts:o}}}}function d(t,e){for(var n=[],i={},r=0;r<t.length;r++){var a=t[r],f=e.base?a[0]+e.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};i[f]?i[f].parts.push(o):n.push(i[f]={id:f,parts:[o]})}return n}function _(t,e){var n=o(t.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===t.insertAt)i?i.nextSibling?n.insertBefore(e,i.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),u.push(e);else if("bottom"===t.insertAt)n.appendChild(e);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=o(t.insertAt.before,n);n.insertBefore(e,r)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=u.indexOf(t);e>=0&&u.splice(e,1)}function p(t){var e=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var i=function(){0;return n.nc}();i&&(t.attrs.nonce=i)}return y(e,t.attrs),_(t,e),e}function y(t,e){Object.keys(e).forEach(function(n){t.setAttribute(n,e[n])})}function v(t,e){var n,i,r,a;if(e.transform&&t.css){if(!(a="function"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=a}if(e.singleton){var f=s++;n=c||(c=p(e)),i=m.bind(null,n,f,!1),r=m.bind(null,n,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(t){var e=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(e,t.attrs),_(t,e),e}(e),i=function(t,e,n){var i=n.css,r=n.sourceMap,a=void 0===e.convertToAbsoluteUrls&&r;(e.convertToAbsoluteUrls||a)&&(i=h(i));r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var f=new Blob([i],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(f),o&&URL.revokeObjectURL(o)}.bind(null,n,e),r=function(){b(n),n.href&&URL.revokeObjectURL(n.href)}):(n=p(e),i=function(t,e){var n=e.css,i=e.media;i&&t.setAttribute("media",i);if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){b(n)});return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=f()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var n=d(t,e);return l(n,e),function(t){for(var i=[],r=0;r<n.length;r++){var f=n[r];(o=a[f.id]).refs--,i.push(o)}t&&l(d(t,e),e);for(r=0;r<i.length;r++){var o;if(0===(o=i[r]).refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete a[o.id]}}}};var g,x=(g=[],function(t,e){return g[t]=e,g.filter(Boolean).join("\n")});function m(t,e,n,i){var r=n?"":i.css;if(t.styleSheet)t.styleSheet.cssText=x(e,r);else{var a=document.createTextNode(r),f=t.childNodes;f[e]&&t.removeChild(f[e]),f.length?t.insertBefore(a,f[e]):t.appendChild(a)}}},function(t,e){t.exports=function(t){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var n=e.protocol+"//"+e.host,i=n+e.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,e){var r,a=e.trim().replace(/^"(.*)"$/,function(t,e){return e}).replace(/^'(.*)'$/,function(t,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(t,e,n){"use strict";n.r(e);var i=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},r=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return i(e(t),n)}),{left:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)<0?i=a+1:r=a}return i},right:function(e,n,i,r){for(null==i&&(i=0),null==r&&(r=e.length);i<r;){var a=i+r>>>1;t(e[a],n)>0?r=a:i=a+1}return i}}};var a=r(i);a.right,a.left;var f=Array.prototype;f.slice,f.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var o=function(t){for(var e,n,i,r=t.length,a=-1,f=0;++a<r;)f+=t[a].length;for(n=new Array(f);--r>=0;)for(e=(i=t[r]).length;--e>=0;)n[--f]=i[e];return n};Array.prototype.slice;var c={value:function(){}};function s(){for(var t,e=0,n=arguments.length,i={};e<n;++e){if(!(t=arguments[e]+"")||t in i)throw new Error("illegal type: "+t);i[t]=[]}return new u(i)}function u(t){this._=t}function h(t,e){return t.trim().split(/^|\s+/).map(function(t){var n="",i=t.indexOf(".");if(i>=0&&(n=t.slice(i+1),t=t.slice(0,i)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})}function l(t,e){for(var n,i=0,r=t.length;i<r;++i)if((n=t[i]).name===e)return n.value}function d(t,e,n){for(var i=0,r=t.length;i<r;++i)if(t[i].name===e){t[i]=c,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=n&&t.push({name:e,value:n}),t}u.prototype=s.prototype={constructor:u,on:function(t,e){var n,i=this._,r=h(t+"",i),a=-1,f=r.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<f;)if(n=(t=r[a]).type)i[n]=d(i[n],t.name,e);else if(null==e)for(n in i)i[n]=d(i[n],t.name,null);return this}for(;++a<f;)if((n=(t=r[a]).type)&&(n=l(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new u(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,i,r=new Array(n),a=0;a<n;++a)r[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(i=this._[t]).length;a<n;++a)i[a].value.apply(e,r)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var i=this._[t],r=0,a=i.length;r<a;++r)i[r].value.apply(e,n)}};var _=s,b="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},y=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),p.hasOwnProperty(e)?{space:p[e],local:t}:t};var v=function(t){var e=y(t);return(e.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===b&&e.documentElement.namespaceURI===b?e.createElement(t):e.createElementNS(n,t)}})(e)};function g(){}var x=function(t){return null==t?g:function(){return this.querySelector(t)}};function m(){return[]}var w=function(t){return null==t?m:function(){return this.querySelectorAll(t)}},M=function(t){return function(){return this.matches(t)}},N=function(t){return new Array(t.length)};function T(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}T.prototype={constructor:T,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var C="$";function A(t,e,n,i,r,a){for(var f,o=0,c=e.length,s=a.length;o<s;++o)(f=e[o])?(f.__data__=a[o],i[o]=f):n[o]=new T(t,a[o]);for(;o<c;++o)(f=e[o])&&(r[o]=f)}function S(t,e,n,i,r,a,f){var o,c,s,u={},h=e.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=e[o])&&(d[o]=s=C+f.call(c,c.__data__,o,e),s in u?r[o]=c:u[s]=c);for(o=0;o<l;++o)(c=u[s=C+f.call(t,a[o],o,a)])?(i[o]=c,c.__data__=a[o],u[s]=null):n[o]=new T(t,a[o]);for(o=0;o<h;++o)(c=e[o])&&u[d[o]]===c&&(r[o]=c)}function k(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function E(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function L(t,e){return function(){this.setAttribute(t,e)}}function P(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function R(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function D(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var j=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function O(t){return function(){this.style.removeProperty(t)}}function Y(t,e,n){return function(){this.style.setProperty(t,e,n)}}function F(t,e,n){return function(){var i=e.apply(this,arguments);null==i?this.style.removeProperty(t):this.style.setProperty(t,i,n)}}function q(t,e){return t.style.getPropertyValue(e)||j(t).getComputedStyle(t,null).getPropertyValue(e)}function H(t){return function(){delete this[t]}}function I(t,e){return function(){this[t]=e}}function z(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function $(t){return t.trim().split(/^|\s+/)}function B(t){return t.classList||new X(t)}function X(t){this._node=t,this._names=$(t.getAttribute("class")||"")}function Z(t,e){for(var n=B(t),i=-1,r=e.length;++i<r;)n.add(e[i])}function V(t,e){for(var n=B(t),i=-1,r=e.length;++i<r;)n.remove(e[i])}function J(t){return function(){Z(this,t)}}function W(t){return function(){V(this,t)}}function Q(t,e){return function(){(e.apply(this,arguments)?Z:V)(this,t)}}X.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function G(){this.textContent=""}function K(t){return function(){this.textContent=t}}function tt(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function et(){this.innerHTML=""}function nt(t){return function(){this.innerHTML=t}}function it(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function rt(){this.nextSibling&&this.parentNode.appendChild(this)}function at(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ft(){return null}function ot(){var t=this.parentNode;t&&t.removeChild(this)}function ct(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function st(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var ut={},ht=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ut={mouseenter:"mouseover",mouseleave:"mouseout"}));function lt(t,e,n){return t=dt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function dt(t,e,n){return function(i){var r=ht;ht=i;try{t.call(this,this.__data__,e,n)}finally{ht=r}}}function _t(t){return t.trim().split(/^|\s+/).map(function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}})}function bt(t){return function(){var e=this.__on;if(e){for(var n,i=0,r=-1,a=e.length;i<a;++i)n=e[i],t.type&&n.type!==t.type||n.name!==t.name?e[++r]=n:this.removeEventListener(n.type,n.listener,n.capture);++r?e.length=r:delete this.__on}}}function pt(t,e,n){var i=ut.hasOwnProperty(t.type)?lt:dt;return function(r,a,f){var o,c=this.__on,s=i(e,a,f);if(c)for(var u=0,h=c.length;u<h;++u)if((o=c[u]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=s,o.capture=n),void(o.value=e);this.addEventListener(t.type,s,n),o={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(o):this.__on=[o]}}function yt(t,e,n){var i=j(t),r=i.CustomEvent;"function"==typeof r?r=new r(e,n):(r=i.document.createEvent("Event"),n?(r.initEvent(e,n.bubbles,n.cancelable),r.detail=n.detail):r.initEvent(e,!1,!1)),t.dispatchEvent(r)}var vt=[null];function gt(t,e){this._groups=t,this._parents=e}function xt(){return new gt([[document.documentElement]],vt)}gt.prototype=xt.prototype={constructor:gt,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f,o=e[r],c=o.length,s=i[r]=new Array(c),u=0;u<c;++u)(a=o[u])&&(f=t.call(a,a.__data__,u,o))&&("__data__"in a&&(f.__data__=a.__data__),s[u]=f);return new gt(i,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=w(t));for(var e=this._groups,n=e.length,i=[],r=[],a=0;a<n;++a)for(var f,o=e[a],c=o.length,s=0;s<c;++s)(f=o[s])&&(i.push(t.call(f,f.__data__,s,o)),r.push(f));return new gt(i,r)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f=e[r],o=f.length,c=i[r]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new gt(i,this._parents)},data:function(t,e){if(!t)return _=new Array(this.size()),u=-1,this.each(function(t){_[++u]=t}),_;var n,i=e?S:A,r=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var f=a.length,o=new Array(f),c=new Array(f),s=new Array(f),u=0;u<f;++u){var h=r[u],l=a[u],d=l.length,_=t.call(h,h&&h.__data__,u,r),b=_.length,p=c[u]=new Array(b),y=o[u]=new Array(b);i(h,l,p,y,s[u]=new Array(d),_,e);for(var v,g,x=0,m=0;x<b;++x)if(v=p[x]){for(x>=m&&(m=x+1);!(g=y[m])&&++m<b;);v._next=g||null}}return(o=new gt(o,r))._enter=c,o._exit=s,o},enter:function(){return new gt(this._enter||this._groups.map(N),this._parents)},exit:function(){return new gt(this._exit||this._groups.map(N),this._parents)},join:function(t,e,n){var i=this.enter(),r=this,a=this.exit();return i="function"==typeof t?t(i):i.append(t+""),null!=e&&(r=e(r)),null==n?a.remove():n(a),i&&r?i.merge(r).order():r},merge:function(t){for(var e=this._groups,n=t._groups,i=e.length,r=n.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<i;++o)f[o]=e[o];return new gt(f,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var i,r=t[e],a=r.length-1,f=r[a];--a>=0;)(i=r[a])&&(f&&4^i.compareDocumentPosition(f)&&f.parentNode.insertBefore(i,f),f=i);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=k);for(var n=this._groups,i=n.length,r=new Array(i),a=0;a<i;++a){for(var f,o=n[a],c=o.length,s=r[a]=new Array(c),u=0;u<c;++u)(f=o[u])&&(s[u]=f);s.sort(e)}return new gt(r,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each(function(){t[++e]=this}),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var i=t[e],r=0,a=i.length;r<a;++r){var f=i[r];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,i=e.length;n<i;++n)for(var r,a=e[n],f=0,o=a.length;f<o;++f)(r=a[f])&&t.call(r,r.__data__,f,a);return this},attr:function(t,e){var n=y(t);if(arguments.length<2){var i=this.node();return n.local?i.getAttributeNS(n.space,n.local):i.getAttribute(n)}return this.each((null==e?n.local?U:E:"function"==typeof e?n.local?D:R:n.local?P:L)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?O:"function"==typeof e?F:Y)(t,e,null==n?"":n)):q(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?H:"function"==typeof e?z:I)(t,e)):this.node()[t]},classed:function(t,e){var n=$(t+"");if(arguments.length<2){for(var i=B(this.node()),r=-1,a=n.length;++r<a;)if(!i.contains(n[r]))return!1;return!0}return this.each(("function"==typeof e?Q:e?J:W)(n,e))},text:function(t){return arguments.length?this.each(null==t?G:("function"==typeof t?tt:K)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?et:("function"==typeof t?it:nt)(t)):this.node().innerHTML},raise:function(){return this.each(rt)},lower:function(){return this.each(at)},append:function(t){var e="function"==typeof t?t:v(t);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(t,e){var n="function"==typeof t?t:v(t),i=null==e?ft:"function"==typeof e?e:x(e);return this.select(function(){return this.insertBefore(n.apply(this,arguments),i.apply(this,arguments)||null)})},remove:function(){return this.each(ot)},clone:function(t){return this.select(t?st:ct)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var i,r,a=_t(t+""),f=a.length;if(!(arguments.length<2)){for(o=e?pt:bt,null==n&&(n=!1),i=0;i<f;++i)this.each(o(a[i],e,n));return this}var o=this.node().__on;if(o)for(var c,s=0,u=o.length;s<u;++s)for(i=0,c=o[s];i<f;++i)if((r=a[i]).type===c.type&&r.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?function(t,e){return function(){return yt(this,t,e.apply(this,arguments))}}:function(t,e){return function(){return yt(this,t,e)}})(t,e))}};var mt=xt,wt=function(t){return"string"==typeof t?new gt([[document.querySelector(t)]],[document.documentElement]):new gt([[t]],vt)},Mt=0;function Nt(){this._="@"+(++Mt).toString(36)}Nt.prototype=function(){return new Nt}.prototype={constructor:Nt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Tt(t,e,n,i,r,a,f,o,c,s){this.target=t,this.type=e,this.subject=n,this.identifier=i,this.active=r,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=s}Tt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Ct=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function At(t,e){var n=Object.create(t.prototype);for(var i in e)n[i]=e[i];return n}function St(){}var kt="\\s*([+-]?\\d+)\\s*",Et="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ut="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Lt=/^#([0-9a-f]{3})$/,Pt=/^#([0-9a-f]{6})$/,Rt=new RegExp("^rgb\\("+[kt,kt,kt]+"\\)$"),Dt=new RegExp("^rgb\\("+[Ut,Ut,Ut]+"\\)$"),jt=new RegExp("^rgba\\("+[kt,kt,kt,Et]+"\\)$"),Ot=new RegExp("^rgba\\("+[Ut,Ut,Ut,Et]+"\\)$"),Yt=new RegExp("^hsl\\("+[Et,Ut,Ut]+"\\)$"),Ft=new RegExp("^hsla\\("+[Et,Ut,Ut,Et]+"\\)$"),qt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ht(){return this.rgb().formatHex()}function It(){return this.rgb().formatRgb()}function zt(t){var e;return t=(t+"").trim().toLowerCase(),(e=Lt.exec(t))?new Vt((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=Pt.exec(t))?$t(parseInt(e[1],16)):(e=Rt.exec(t))?new Vt(e[1],e[2],e[3],1):(e=Dt.exec(t))?new Vt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=jt.exec(t))?Bt(e[1],e[2],e[3],e[4]):(e=Ot.exec(t))?Bt(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Yt.exec(t))?Gt(e[1],e[2]/100,e[3]/100,1):(e=Ft.exec(t))?Gt(e[1],e[2]/100,e[3]/100,e[4]):qt.hasOwnProperty(t)?$t(qt[t]):"transparent"===t?new Vt(NaN,NaN,NaN,0):null}function $t(t){return new Vt(t>>16&255,t>>8&255,255&t,1)}function Bt(t,e,n,i){return i<=0&&(t=e=n=NaN),new Vt(t,e,n,i)}function Xt(t){return t instanceof St||(t=zt(t)),t?new Vt((t=t.rgb()).r,t.g,t.b,t.opacity):new Vt}function Zt(t,e,n,i){return 1===arguments.length?Xt(t):new Vt(t,e,n,null==i?1:i)}function Vt(t,e,n,i){this.r=+t,this.g=+e,this.b=+n,this.opacity=+i}function Jt(){return"#"+Qt(this.r)+Qt(this.g)+Qt(this.b)}function Wt(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Qt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Gt(t,e,n,i){return i<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new ee(t,e,n,i)}function Kt(t){if(t instanceof ee)return new ee(t.h,t.s,t.l,t.opacity);if(t instanceof St||(t=zt(t)),!t)return new ee;if(t instanceof ee)return t;var e=(t=t.rgb()).r/255,n=t.g/255,i=t.b/255,r=Math.min(e,n,i),a=Math.max(e,n,i),f=NaN,o=a-r,c=(a+r)/2;return o?(f=e===a?(n-i)/o+6*(n<i):n===a?(i-e)/o+2:(e-n)/o+4,o/=c<.5?a+r:2-a-r,f*=60):o=c>0&&c<1?0:f,new ee(f,o,c,t.opacity)}function te(t,e,n,i){return 1===arguments.length?Kt(t):new ee(t,e,n,null==i?1:i)}function ee(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function ne(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}Ct(St,zt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Ht,formatHex:Ht,formatHsl:function(){return Kt(this).formatHsl()},formatRgb:It,toString:It}),Ct(Vt,Zt,At(St,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Vt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Vt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Jt,formatHex:Jt,formatRgb:Wt,toString:Wt})),Ct(ee,te,At(St,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,i=n+(n<.5?n:1-n)*e,r=2*n-i;return new Vt(ne(t>=240?t-240:t+120,r,i),ne(t,r,i),ne(t<120?t+240:t-120,r,i),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var ie=Math.PI/180,re=180/Math.PI,ae=.96422,fe=1,oe=.82521,ce=4/29,se=6/29,ue=3*se*se,he=se*se*se;function le(t){if(t instanceof _e)return new _e(t.l,t.a,t.b,t.opacity);if(t instanceof me)return we(t);t instanceof Vt||(t=Xt(t));var e,n,i=ve(t.r),r=ve(t.g),a=ve(t.b),f=be((.2225045*i+.7168786*r+.0606169*a)/fe);return i===r&&r===a?e=n=f:(e=be((.4360747*i+.3850649*r+.1430804*a)/ae),n=be((.0139322*i+.0971045*r+.7141733*a)/oe)),new _e(116*f-16,500*(e-f),200*(f-n),t.opacity)}function de(t,e,n,i){return 1===arguments.length?le(t):new _e(t,e,n,null==i?1:i)}function _e(t,e,n,i){this.l=+t,this.a=+e,this.b=+n,this.opacity=+i}function be(t){return t>he?Math.pow(t,1/3):t/ue+ce}function pe(t){return t>se?t*t*t:ue*(t-ce)}function ye(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function ve(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ge(t){if(t instanceof me)return new me(t.h,t.c,t.l,t.opacity);if(t instanceof _e||(t=le(t)),0===t.a&&0===t.b)return new me(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*re;return new me(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function xe(t,e,n,i){return 1===arguments.length?ge(t):new me(t,e,n,null==i?1:i)}function me(t,e,n,i){this.h=+t,this.c=+e,this.l=+n,this.opacity=+i}function we(t){if(isNaN(t.h))return new _e(t.l,0,0,t.opacity);var e=t.h*ie;return new _e(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}Ct(_e,de,At(St,{brighter:function(t){return new _e(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new _e(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new Vt(ye(3.1338561*(e=ae*pe(e))-1.6168667*(t=fe*pe(t))-.4906146*(n=oe*pe(n))),ye(-.9787684*e+1.9161415*t+.033454*n),ye(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),Ct(me,xe,At(St,{brighter:function(t){return new me(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new me(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return we(this).rgb()}}));var Me=-.29227,Ne=-.90649,Te=1.97294,Ce=Te*Ne,Ae=1.78277*Te,Se=1.78277*Me- -.14861*Ne;function ke(t,e,n,i){return 1===arguments.length?function(t){if(t instanceof Ee)return new Ee(t.h,t.s,t.l,t.opacity);t instanceof Vt||(t=Xt(t));var e=t.r/255,n=t.g/255,i=t.b/255,r=(Se*i+Ce*e-Ae*n)/(Se+Ce-Ae),a=i-r,f=(Te*(n-r)-Me*a)/Ne,o=Math.sqrt(f*f+a*a)/(Te*r*(1-r)),c=o?Math.atan2(f,a)*re-120:NaN;return new Ee(c<0?c+360:c,o,r,t.opacity)}(t):new Ee(t,e,n,null==i?1:i)}function Ee(t,e,n,i){this.h=+t,this.s=+e,this.l=+n,this.opacity=+i}function Ue(t,e,n,i,r){var a=t*t,f=a*t;return((1-3*t+3*a-f)*e+(4-6*a+3*f)*n+(1+3*t+3*a-3*f)*i+f*r)/6}Ct(Ee,ke,At(St,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ee(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*ie,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),i=Math.cos(t),r=Math.sin(t);return new Vt(255*(e+n*(-.14861*i+1.78277*r)),255*(e+n*(Me*i+Ne*r)),255*(e+n*(Te*i)),this.opacity)}}));var Le=function(t){return function(){return t}};function Pe(t,e){return function(n){return t+n*e}}function Re(t,e){var n=e-t;return n?Pe(t,n>180||n<-180?n-360*Math.round(n/360):n):Le(isNaN(t)?e:t)}function De(t){return 1==(t=+t)?je:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(i){return Math.pow(t+i*e,n)}}(e,n,t):Le(isNaN(e)?n:e)}}function je(t,e){var n=e-t;return n?Pe(t,n):Le(isNaN(t)?e:t)}var Oe=function t(e){var n=De(e);function i(t,e){var i=n((t=Zt(t)).r,(e=Zt(e)).r),r=n(t.g,e.g),a=n(t.b,e.b),f=je(t.opacity,e.opacity);return function(e){return t.r=i(e),t.g=r(e),t.b=a(e),t.opacity=f(e),t+""}}return i.gamma=t,i}(1);function Ye(t){return function(e){var n,i,r=e.length,a=new Array(r),f=new Array(r),o=new Array(r);for(n=0;n<r;++n)i=Zt(e[n]),a[n]=i.r||0,f[n]=i.g||0,o[n]=i.b||0;return a=t(a),f=t(f),o=t(o),i.opacity=1,function(t){return i.r=a(t),i.g=f(t),i.b=o(t),i+""}}}var Fe=Ye(function(t){var e=t.length-1;return function(n){var i=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),r=t[i],a=t[i+1],f=i>0?t[i-1]:2*r-a,o=i<e-1?t[i+2]:2*a-r;return Ue((n-i/e)*e,f,r,a,o)}}),qe=(Ye(function(t){var e=t.length;return function(n){var i=Math.floor(((n%=1)<0?++n:n)*e),r=t[(i+e-1)%e],a=t[i%e],f=t[(i+1)%e],o=t[(i+2)%e];return Ue((n-i/e)*e,r,a,f,o)}}),function(t,e){return e-=t=+t,function(n){return t+e*n}}),He=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ie=new RegExp(He.source,"g");var ze,$e,Be,Xe,Ze=function(t,e){var n,i,r,a=He.lastIndex=Ie.lastIndex=0,f=-1,o=[],c=[];for(t+="",e+="";(n=He.exec(t))&&(i=Ie.exec(e));)(r=i.index)>a&&(r=e.slice(a,r),o[f]?o[f]+=r:o[++f]=r),(n=n[0])===(i=i[0])?o[f]?o[f]+=i:o[++f]=i:(o[++f]=null,c.push({i:f,x:qe(n,i)})),a=Ie.lastIndex;return a<e.length&&(r=e.slice(a),o[f]?o[f]+=r:o[++f]=r),o.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,i=0;i<e;++i)o[(n=c[i]).i]=n.x(t);return o.join("")})},Ve=180/Math.PI,Je={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},We=function(t,e,n,i,r,a){var f,o,c;return(f=Math.sqrt(t*t+e*e))&&(t/=f,e/=f),(c=t*n+e*i)&&(n-=t*c,i-=e*c),(o=Math.sqrt(n*n+i*i))&&(n/=o,i/=o,c/=o),t*i<e*n&&(t=-t,e=-e,c=-c,f=-f),{translateX:r,translateY:a,rotate:Math.atan2(e,t)*Ve,skewX:Math.atan(c)*Ve,scaleX:f,scaleY:o}};function Qe(t,e,n,i){function r(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,i,r,a,f,o){if(t!==r||i!==a){var c=f.push("translate(",null,e,null,n);o.push({i:c-4,x:qe(t,r)},{i:c-2,x:qe(i,a)})}else(r||a)&&f.push("translate("+r+e+a+n)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(r(n)+"rotate(",null,i)-2,x:qe(t,e)})):e&&n.push(r(n)+"rotate("+e+i)}(a.rotate,f.rotate,o,c),function(t,e,n,a){t!==e?a.push({i:n.push(r(n)+"skewX(",null,i)-2,x:qe(t,e)}):e&&n.push(r(n)+"skewX("+e+i)}(a.skewX,f.skewX,o,c),function(t,e,n,i,a,f){if(t!==n||e!==i){var o=a.push(r(a)+"scale(",null,",",null,")");f.push({i:o-4,x:qe(t,n)},{i:o-2,x:qe(e,i)})}else 1===n&&1===i||a.push(r(a)+"scale("+n+","+i+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var e,n=-1,i=c.length;++n<i;)o[(e=c[n]).i]=e.x(t);return o.join("")}}}var Ge=Qe(function(t){return"none"===t?Je:(ze||(ze=document.createElement("DIV"),$e=document.documentElement,Be=document.defaultView),ze.style.transform=t,t=Be.getComputedStyle($e.appendChild(ze),null).getPropertyValue("transform"),$e.removeChild(ze),t=t.slice(7,-1).split(","),We(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Ke=Qe(function(t){return null==t?Je:(Xe||(Xe=document.createElementNS("http://www.w3.org/2000/svg","g")),Xe.setAttribute("transform",t),(t=Xe.transform.baseVal.consolidate())?(t=t.matrix,We(t.a,t.b,t.c,t.d,t.e,t.f)):Je)},", ",")",")");Math.SQRT2;function tn(t){return function(e,n){var i=t((e=te(e)).h,(n=te(n)).h),r=je(e.s,n.s),a=je(e.l,n.l),f=je(e.opacity,n.opacity);return function(t){return e.h=i(t),e.s=r(t),e.l=a(t),e.opacity=f(t),e+""}}}tn(Re),tn(je);function en(t){return function(e,n){var i=t((e=xe(e)).h,(n=xe(n)).h),r=je(e.c,n.c),a=je(e.l,n.l),f=je(e.opacity,n.opacity);return function(t){return e.h=i(t),e.c=r(t),e.l=a(t),e.opacity=f(t),e+""}}}en(Re),en(je);function nn(t){return function e(n){function i(e,i){var r=t((e=ke(e)).h,(i=ke(i)).h),a=je(e.s,i.s),f=je(e.l,i.l),o=je(e.opacity,i.opacity);return function(t){return e.h=r(t),e.s=a(t),e.l=f(Math.pow(t,n)),e.opacity=o(t),e+""}}return n=+n,i.gamma=e,i}(1)}nn(Re);var rn=nn(je);var an,fn,on=0,cn=0,sn=0,un=1e3,hn=0,ln=0,dn=0,_n="object"==typeof performance&&performance.now?performance:Date,bn="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function pn(){return ln||(bn(yn),ln=_n.now()+dn)}function yn(){ln=0}function vn(){this._call=this._time=this._next=null}function gn(t,e,n){var i=new vn;return i.restart(t,e,n),i}function xn(){ln=(hn=_n.now())+dn,on=cn=0;try{!function(){pn(),++on;for(var t,e=an;e;)(t=ln-e._time)>=0&&e._call.call(null,t),e=e._next;--on}()}finally{on=0,function(){var t,e,n=an,i=1/0;for(;n;)n._call?(i>n._time&&(i=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:an=e);fn=t,wn(i)}(),ln=0}}function mn(){var t=_n.now(),e=t-hn;e>un&&(dn-=e,hn=t)}function wn(t){on||(cn&&(cn=clearTimeout(cn)),t-ln>24?(t<1/0&&(cn=setTimeout(xn,t-_n.now()-dn)),sn&&(sn=clearInterval(sn))):(sn||(hn=_n.now(),sn=setInterval(mn,un)),on=1,bn(xn)))}vn.prototype=gn.prototype={constructor:vn,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?pn():+n)+(null==e?0:+e),this._next||fn===this||(fn?fn._next=this:an=this,fn=this),this._call=t,this._time=n,wn()},stop:function(){this._call&&(this._call=null,this._time=1/0,wn())}};var Mn=function(t,e,n){var i=new vn;return e=null==e?0:+e,i.restart(function(n){i.stop(),t(n+e)},e,n),i},Nn=_("start","end","cancel","interrupt"),Tn=[],Cn=0,An=1,Sn=2,kn=3,En=4,Un=5,Ln=6,Pn=function(t,e,n,i,r,a){var f=t.__transition;if(f){if(n in f)return}else t.__transition={};!function(t,e,n){var i,r=t.__transition;function a(c){var s,u,h,l;if(n.state!==An)return o();for(s in r)if((l=r[s]).name===n.name){if(l.state===kn)return Mn(a);l.state===En?(l.state=Ln,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete r[s]):+s<e&&(l.state=Ln,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete r[s])}if(Mn(function(){n.state===kn&&(n.state=En,n.timer.restart(f,n.delay,n.time),f(c))}),n.state=Sn,n.on.call("start",t,t.__data__,n.index,n.group),n.state===Sn){for(n.state=kn,i=new Array(h=n.tween.length),s=0,u=-1;s<h;++s)(l=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(i[++u]=l);i.length=u+1}}function f(e){for(var r=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(o),n.state=Un,1),a=-1,f=i.length;++a<f;)i[a].call(t,r);n.state===Un&&(n.on.call("end",t,t.__data__,n.index,n.group),o())}function o(){for(var i in n.state=Ln,n.timer.stop(),delete r[e],r)return;delete t.__transition}r[e]=n,n.timer=gn(function(t){n.state=An,n.timer.restart(a,n.delay,n.time),n.delay<=t&&a(t-n.delay)},0,n.time)}(t,n,{name:e,index:i,group:r,on:Nn,tween:Tn,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Cn})};function Rn(t,e){var n=jn(t,e);if(n.state>Cn)throw new Error("too late; already scheduled");return n}function Dn(t,e){var n=jn(t,e);if(n.state>kn)throw new Error("too late; already running");return n}function jn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var On=function(t,e){var n,i,r,a=t.__transition,f=!0;if(a){for(r in e=null==e?null:e+"",a)(n=a[r]).name===e?(i=n.state>Sn&&n.state<Un,n.state=Ln,n.timer.stop(),n.on.call(i?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[r]):f=!1;f&&delete t.__transition}};function Yn(t,e){var n,i;return function(){var r=Dn(this,t),a=r.tween;if(a!==n)for(var f=0,o=(i=n=a).length;f<o;++f)if(i[f].name===e){(i=i.slice()).splice(f,1);break}r.tween=i}}function Fn(t,e,n){var i,r;if("function"!=typeof n)throw new Error;return function(){var a=Dn(this,t),f=a.tween;if(f!==i){r=(i=f).slice();for(var o={name:e,value:n},c=0,s=r.length;c<s;++c)if(r[c].name===e){r[c]=o;break}c===s&&r.push(o)}a.tween=r}}function qn(t,e,n){var i=t._id;return t.each(function(){var t=Dn(this,i);(t.value||(t.value={}))[e]=n.apply(this,arguments)}),function(t){return jn(t,i).value[e]}}var Hn=function(t,e){var n;return("number"==typeof e?qe:e instanceof zt?Oe:(n=zt(e))?(e=n,Oe):Ze)(t,e)};function In(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e(n))}}(t,r)),n}return r._value=e,r}function zn(t,e){var n,i;function r(){var r=e.apply(this,arguments);return r!==i&&(n=(i=r)&&function(t,e){return function(n){this.setAttribute(t,e(n))}}(t,r)),n}return r._value=e,r}function $n(t,e){return function(){Rn(this,t).delay=+e.apply(this,arguments)}}function Bn(t,e){return e=+e,function(){Rn(this,t).delay=e}}function Xn(t,e){return function(){Dn(this,t).duration=+e.apply(this,arguments)}}function Zn(t,e){return e=+e,function(){Dn(this,t).duration=e}}function Vn(t,e){if("function"!=typeof e)throw new Error;return function(){Dn(this,t).ease=e}}function Jn(t,e,n){var i,r,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t})}(e)?Rn:Dn;return function(){var f=a(this,t),o=f.on;o!==i&&(r=(i=o).copy()).on(e,n),f.on=r}}var Wn=mt.prototype.constructor;function Qn(t){return function(){this.style.removeProperty(t)}}function Gn(t,e,n){var i,r;function a(){var a=e.apply(this,arguments);return a!==r&&(i=(r=a)&&function(t,e,n){return function(i){this.style.setProperty(t,e(i),n)}}(t,a,n)),i}return a._value=e,a}var Kn=0;function ti(t,e,n,i){this._groups=t,this._parents=e,this._name=n,this._id=i}function ei(){return++Kn}var ni=mt.prototype;ti.prototype=function(t){return mt().transition(t)}.prototype={constructor:ti,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var i=this._groups,r=i.length,a=new Array(r),f=0;f<r;++f)for(var o,c,s=i[f],u=s.length,h=a[f]=new Array(u),l=0;l<u;++l)(o=s[l])&&(c=t.call(o,o.__data__,l,s))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,Pn(h[l],e,n,l,h,jn(o,n)));return new ti(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=w(t));for(var i=this._groups,r=i.length,a=[],f=[],o=0;o<r;++o)for(var c,s=i[o],u=s.length,h=0;h<u;++h)if(c=s[h]){for(var l,d=t.call(c,c.__data__,h,s),_=jn(c,n),b=0,p=d.length;b<p;++b)(l=d[b])&&Pn(l,e,n,b,d,_);a.push(d),f.push(c)}return new ti(a,f,e,n)},filter:function(t){"function"!=typeof t&&(t=M(t));for(var e=this._groups,n=e.length,i=new Array(n),r=0;r<n;++r)for(var a,f=e[r],o=f.length,c=i[r]=[],s=0;s<o;++s)(a=f[s])&&t.call(a,a.__data__,s,f)&&c.push(a);return new ti(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,i=e.length,r=n.length,a=Math.min(i,r),f=new Array(i),o=0;o<a;++o)for(var c,s=e[o],u=n[o],h=s.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=s[d]||u[d])&&(l[d]=c);for(;o<i;++o)f[o]=e[o];return new ti(f,this._parents,this._name,this._id)},selection:function(){return new Wn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=ei(),i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,s=0;s<c;++s)if(f=o[s]){var u=jn(f,e);Pn(f,t,n,s,o,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new ti(i,this._parents,t,n)},call:ni.call,nodes:ni.nodes,node:ni.node,size:ni.size,empty:ni.empty,each:ni.each,on:function(t,e){var n=this._id;return arguments.length<2?jn(this.node(),n).on.on(t):this.each(Jn(n,t,e))},attr:function(t,e){var n=y(t),i="transform"===n?Ke:Hn;return this.attrTween(t,"function"==typeof e?(n.local?function(t,e,n){var i,r,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=e(i=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,e,n){var i,r,a;return function(){var f,o,c=n(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===i&&o===r?a:(r=o,a=e(i=f,c));this.removeAttribute(t)}})(n,i,qn(this,"attr."+t,e)):null==e?(n.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(n):(n.local?function(t,e,n){var i,r,a=n+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===i?r:r=e(i=f,n)}}:function(t,e,n){var i,r,a=n+"";return function(){var f=this.getAttribute(t);return f===a?null:f===i?r:r=e(i=f,n)}})(n,i,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var i=y(t);return this.tween(n,(i.local?In:zn)(i,e))},style:function(t,e,n){var i="transform"==(t+="")?Ge:Hn;return null==e?this.styleTween(t,function(t,e){var n,i,r;return function(){var a=q(this,t),f=(this.style.removeProperty(t),q(this,t));return a===f?null:a===n&&f===i?r:r=e(n=a,i=f)}}(t,i)).on("end.style."+t,Qn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var i,r,a;return function(){var f=q(this,t),o=n(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=q(this,t)),f===c?null:f===i&&c===r?a:(r=c,a=e(i=f,o))}}(t,i,qn(this,"style."+t,e))).each(function(t,e){var n,i,r,a,f="style."+e,o="end."+f;return function(){var c=Dn(this,t),s=c.on,u=null==c.value[f]?a||(a=Qn(e)):void 0;s===n&&r===u||(i=(n=s).copy()).on(o,r=u),c.on=i}}(this._id,t)):this.styleTween(t,function(t,e,n){var i,r,a=n+"";return function(){var f=q(this,t);return f===a?null:f===i?r:r=e(i=f,n)}}(t,i,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var i="style."+(t+="");if(arguments.length<2)return(i=this.tween(i))&&i._value;if(null==e)return this.tween(i,null);if("function"!=typeof e)throw new Error;return this.tween(i,Gn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(qn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var i,r=jn(this.node(),n).tween,a=0,f=r.length;a<f;++a)if((i=r[a]).name===t)return i.value;return null}return this.each((null==e?Yn:Fn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?$n:Bn)(e,t)):jn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Xn:Zn)(e,t)):jn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Vn(e,t)):jn(this.node(),e).ease},end:function(){var t,e,n=this,i=n._id,r=n.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--r&&a()}};n.each(function(){var n=Dn(this,i),r=n.on;r!==t&&((e=(t=r).copy())._.cancel.push(o),e._.interrupt.push(o),e._.end.push(c)),n.on=e})})}};(function t(e){function n(t){return Math.pow(t,e)}return e=+e,n.exponent=t,n})(3),function t(e){function n(t){return 1-Math.pow(1-t,e)}return e=+e,n.exponent=t,n}(3),function t(e){function n(t){return((t*=2)<=1?Math.pow(t,e):2-Math.pow(2-t,e))/2}return e=+e,n.exponent=t,n}(3),Math.PI;(function t(e){function n(t){return t*t*((e+1)*t-e)}return e=+e,n.overshoot=t,n})(1.70158),function t(e){function n(t){return--t*t*((e+1)*t+e)+1}return e=+e,n.overshoot=t,n}(1.70158),function t(e){function n(t){return((t*=2)<1?t*t*((e+1)*t-e):(t-=2)*t*((e+1)*t+e)+2)/2}return e=+e,n.overshoot=t,n}(1.70158);var ii=2*Math.PI,ri=(function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return e*Math.pow(2,10*--t)*Math.sin((i-t)/n)}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return 1-e*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/n)}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),function t(e,n){var i=Math.asin(1/(e=Math.max(1,e)))*(n/=ii);function r(t){return((t=2*t-1)<0?e*Math.pow(2,10*t)*Math.sin((i-t)/n):2-e*Math.pow(2,-10*t)*Math.sin((i+t)/n))/2}return r.amplitude=function(e){return t(e,n*ii)},r.period=function(n){return t(e,n)},r}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function ai(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return ri.time=pn(),ri;return n}mt.prototype.interrupt=function(t){return this.each(function(){On(this,t)})},mt.prototype.transition=function(t){var e,n;t instanceof ti?(e=t._id,t=t._name):(e=ei(),(n=ri).time=pn(),t=null==t?null:t+"");for(var i=this._groups,r=i.length,a=0;a<r;++a)for(var f,o=i[a],c=o.length,s=0;s<c;++s)(f=o[s])&&Pn(f,t,e,s,o,n||ai(f,e));return new ti(i,this._parents,t,e)};["e","w"].map(fi),["n","s"].map(fi),["n","e","s","w","nw","ne","se","sw"].map(fi);function fi(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var oi=Math.PI,ci=2*oi,si=ci-1e-6;function ui(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function hi(){return new ui}ui.prototype=hi.prototype={constructor:ui,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,i){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+i)},bezierCurveTo:function(t,e,n,i,r,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +i+","+(this._x1=+r)+","+(this._y1=+a)},arcTo:function(t,e,n,i,r){t=+t,e=+e,n=+n,i=+i,r=+r;var a=this._x1,f=this._y1,o=n-t,c=i-e,s=a-t,u=f-e,h=s*s+u*u;if(r<0)throw new Error("negative radius: "+r);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(h>1e-6)if(Math.abs(u*o-c*s)>1e-6&&r){var l=n-a,d=i-f,_=o*o+c*c,b=l*l+d*d,p=Math.sqrt(_),y=Math.sqrt(h),v=r*Math.tan((oi-Math.acos((_+h-b)/(2*p*y)))/2),g=v/y,x=v/p;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*s)+","+(e+g*u)),this._+="A"+r+","+r+",0,0,"+ +(u*l>s*d)+","+(this._x1=t+x*o)+","+(this._y1=e+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,i,r,a){t=+t,e=+e,a=!!a;var f=(n=+n)*Math.cos(i),o=n*Math.sin(i),c=t+f,s=e+o,u=1^a,h=a?i-r:r-i;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(h<0&&(h=h%ci+ci),h>si?this._+="A"+n+","+n+",0,1,"+u+","+(t-f)+","+(e-o)+"A"+n+","+n+",0,1,"+u+","+(this._x1=c)+","+(this._y1=s):h>1e-6&&(this._+="A"+n+","+n+",0,"+ +(h>=oi)+","+u+","+(this._x1=t+n*Math.cos(r))+","+(this._y1=e+n*Math.sin(r))))},rect:function(t,e,n,i){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +i+"h"+-n+"Z"},toString:function(){return this._}};function li(){}function di(t,e){var n=new li;if(t instanceof li)t.each(function(t,e){n.set(e,t)});else if(Array.isArray(t)){var i,r=-1,a=t.length;if(null==e)for(;++r<a;)n.set(r,t[r]);else for(;++r<a;)n.set(e(i=t[r],r,t),i)}else if(t)for(var f in t)n.set(f,t[f]);return n}li.prototype=di.prototype={constructor:li,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var _i=di;function bi(){}var pi=_i.prototype;function yi(t,e){var n=new bi;if(t instanceof bi)t.each(function(t){n.add(t)});else if(t){var i=-1,r=t.length;if(null==e)for(;++i<r;)n.add(t[i]);else for(;++i<r;)n.add(e(t[i],i,t))}return n}bi.prototype=yi.prototype={constructor:bi,has:pi.has,add:function(t){return this["$"+(t+="")]=t,this},remove:pi.remove,clear:pi.clear,values:pi.keys,size:pi.size,empty:pi.empty,each:pi.each};Array.prototype.slice;var vi={},gi={},xi=34,mi=10,wi=13;function Mi(t){return new Function("d","return {"+t.map(function(t,e){return JSON.stringify(t)+": d["+e+"]"}).join(",")+"}")}function Ni(t){var e=Object.create(null),n=[];return t.forEach(function(t){for(var i in t)i in e||n.push(e[i]=i)}),n}function Ti(t,e){var n=t+"",i=n.length;return i<e?new Array(e-i+1).join(0)+n:n}function Ci(t){var e,n=t.getUTCHours(),i=t.getUTCMinutes(),r=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+Ti(-e,6):e>9999?"+"+Ti(e,6):Ti(e,4))+"-"+Ti(t.getUTCMonth()+1,2)+"-"+Ti(t.getUTCDate(),2)+(a?"T"+Ti(n,2)+":"+Ti(i,2)+":"+Ti(r,2)+"."+Ti(a,3)+"Z":r?"T"+Ti(n,2)+":"+Ti(i,2)+":"+Ti(r,2)+"Z":i||n?"T"+Ti(n,2)+":"+Ti(i,2)+"Z":"")}var Ai=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function i(t,e){var i,r=[],a=t.length,f=0,o=0,c=a<=0,s=!1;function u(){if(c)return gi;if(s)return s=!1,vi;var e,i,r=f;if(t.charCodeAt(r)===xi){for(;f++<a&&t.charCodeAt(f)!==xi||t.charCodeAt(++f)===xi;);return(e=f)>=a?c=!0:(i=t.charCodeAt(f++))===mi?s=!0:i===wi&&(s=!0,t.charCodeAt(f)===mi&&++f),t.slice(r+1,e-1).replace(/""/g,'"')}for(;f<a;){if((i=t.charCodeAt(e=f++))===mi)s=!0;else if(i===wi)s=!0,t.charCodeAt(f)===mi&&++f;else if(i!==n)continue;return t.slice(r,e)}return c=!0,t.slice(r,a)}for(t.charCodeAt(a-1)===mi&&--a,t.charCodeAt(a-1)===wi&&--a;(i=u())!==gi;){for(var h=[];i!==vi&&i!==gi;)h.push(i),i=u();e&&null==(h=e(h,o++))||r.push(h)}return r}function r(e,n){return e.map(function(e){return n.map(function(t){return f(e[t])}).join(t)})}function a(e){return e.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?Ci(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,r,a=i(t,function(t,i){if(n)return n(t,i-1);r=t,n=e?function(t,e){var n=Mi(t);return function(i,r){return e(n(i),r,t)}}(t,e):Mi(t)});return a.columns=r||[],a},parseRows:i,format:function(e,n){return null==n&&(n=Ni(e)),[n.map(f).join(t)].concat(r(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=Ni(t)),r(t,e).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},Si=Ai(","),ki=Si.parse,Ei=(Si.parseRows,Si.format,Si.formatBody,Si.formatRows,Ai("\t")),Ui=Ei.parse;Ei.parseRows,Ei.format,Ei.formatBody,Ei.formatRows;function Li(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Pi=function(t,e){return fetch(t,e).then(Li)};function Ri(t){return function(e,n,i){return 2===arguments.length&&"function"==typeof n&&(i=n,n=void 0),Pi(e,n).then(function(e){return t(e,i)})}}Ri(ki),Ri(Ui);function Di(t){return function(e,n){return Pi(e,n).then(function(e){return(new DOMParser).parseFromString(e,t)})}}Di("application/xml"),Di("text/html"),Di("image/svg+xml");function ji(t,e,n,i){if(isNaN(e)||isNaN(n))return t;var r,a,f,o,c,s,u,h,l,d=t._root,_={data:i},b=t._x0,p=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=_,t;for(;d.length;)if((s=e>=(a=(b+y)/2))?b=a:y=a,(u=n>=(f=(p+v)/2))?p=f:v=f,r=d,!(d=d[h=u<<1|s]))return r[h]=_,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),e===o&&n===c)return _.next=d,r?r[h]=_:t._root=_,t;do{r=r?r[h]=new Array(4):t._root=new Array(4),(s=e>=(a=(b+y)/2))?b=a:y=a,(u=n>=(f=(p+v)/2))?p=f:v=f}while((h=u<<1|s)==(l=(c>=f)<<1|o>=a));return r[l]=d,r[h]=_,t}var Oi=function(t,e,n,i,r){this.node=t,this.x0=e,this.y0=n,this.x1=i,this.y1=r};function Yi(t){return t[0]}function Fi(t){return t[1]}function qi(t,e,n){var i=new Hi(null==e?Yi:e,null==n?Fi:n,NaN,NaN,NaN,NaN);return null==t?i:i.addAll(t)}function Hi(t,e,n,i,r,a){this._x=t,this._y=e,this._x0=n,this._y0=i,this._x1=r,this._y1=a,this._root=void 0}function Ii(t){for(var e={data:t.data},n=e;t=t.next;)n=n.next={data:t.data};return e}var zi=qi.prototype=Hi.prototype;zi.copy=function(){var t,e,n=new Hi(this._x,this._y,this._x0,this._y0,this._x1,this._y1),i=this._root;if(!i)return n;if(!i.length)return n._root=Ii(i),n;for(t=[{source:i,target:n._root=new Array(4)}];i=t.pop();)for(var r=0;r<4;++r)(e=i.source[r])&&(e.length?t.push({source:e,target:i.target[r]=new Array(4)}):i.target[r]=Ii(e));return n},zi.add=function(t){var e=+this._x.call(null,t),n=+this._y.call(null,t);return ji(this.cover(e,n),e,n,t)},zi.addAll=function(t){var e,n,i,r,a=t.length,f=new Array(a),o=new Array(a),c=1/0,s=1/0,u=-1/0,h=-1/0;for(n=0;n<a;++n)isNaN(i=+this._x.call(null,e=t[n]))||isNaN(r=+this._y.call(null,e))||(f[n]=i,o[n]=r,i<c&&(c=i),i>u&&(u=i),r<s&&(s=r),r>h&&(h=r));if(c>u||s>h)return this;for(this.cover(c,s).cover(u,h),n=0;n<a;++n)ji(this,f[n],o[n],t[n]);return this},zi.cover=function(t,e){if(isNaN(t=+t)||isNaN(e=+e))return this;var n=this._x0,i=this._y0,r=this._x1,a=this._y1;if(isNaN(n))r=(n=Math.floor(t))+1,a=(i=Math.floor(e))+1;else{for(var f,o,c=r-n,s=this._root;n>t||t>=r||i>e||e>=a;)switch(o=(e<i)<<1|t<n,(f=new Array(4))[o]=s,s=f,c*=2,o){case 0:r=n+c,a=i+c;break;case 1:n=r-c,a=i+c;break;case 2:r=n+c,i=a-c;break;case 3:n=r-c,i=a-c}this._root&&this._root.length&&(this._root=s)}return this._x0=n,this._y0=i,this._x1=r,this._y1=a,this},zi.data=function(){var t=[];return this.visit(function(e){if(!e.length)do{t.push(e.data)}while(e=e.next)}),t},zi.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},zi.find=function(t,e,n){var i,r,a,f,o,c,s,u=this._x0,h=this._y0,l=this._x1,d=this._y1,_=[],b=this._root;for(b&&_.push(new Oi(b,u,h,l,d)),null==n?n=1/0:(u=t-n,h=e-n,l=t+n,d=e+n,n*=n);c=_.pop();)if(!(!(b=c.node)||(r=c.x0)>l||(a=c.y0)>d||(f=c.x1)<u||(o=c.y1)<h))if(b.length){var p=(r+f)/2,y=(a+o)/2;_.push(new Oi(b[3],p,y,f,o),new Oi(b[2],r,y,p,o),new Oi(b[1],p,a,f,y),new Oi(b[0],r,a,p,y)),(s=(e>=y)<<1|t>=p)&&(c=_[_.length-1],_[_.length-1]=_[_.length-1-s],_[_.length-1-s]=c)}else{var v=t-+this._x.call(null,b.data),g=e-+this._y.call(null,b.data),x=v*v+g*g;if(x<n){var m=Math.sqrt(n=x);u=t-m,h=e-m,l=t+m,d=e+m,i=b.data}}return i},zi.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var e,n,i,r,a,f,o,c,s,u,h,l,d=this._root,_=this._x0,b=this._y0,p=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((s=a>=(o=(_+p)/2))?_=o:p=o,(u=f>=(c=(b+y)/2))?b=c:y=c,e=d,!(d=d[h=u<<1|s]))return this;if(!d.length)break;(e[h+1&3]||e[h+2&3]||e[h+3&3])&&(n=e,l=h)}for(;d.data!==t;)if(i=d,!(d=d.next))return this;return(r=d.next)&&delete d.next,i?(r?i.next=r:delete i.next,this):e?(r?e[h]=r:delete e[h],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(n?n[l]=d:this._root=d),this):(this._root=r,this)},zi.removeAll=function(t){for(var e=0,n=t.length;e<n;++e)this.remove(t[e]);return this},zi.root=function(){return this._root},zi.size=function(){var t=0;return this.visit(function(e){if(!e.length)do{++t}while(e=e.next)}),t},zi.visit=function(t){var e,n,i,r,a,f,o=[],c=this._root;for(c&&o.push(new Oi(c,this._x0,this._y0,this._x1,this._y1));e=o.pop();)if(!t(c=e.node,i=e.x0,r=e.y0,a=e.x1,f=e.y1)&&c.length){var s=(i+a)/2,u=(r+f)/2;(n=c[3])&&o.push(new Oi(n,s,u,a,f)),(n=c[2])&&o.push(new Oi(n,i,u,s,f)),(n=c[1])&&o.push(new Oi(n,s,r,a,u)),(n=c[0])&&o.push(new Oi(n,i,r,s,u))}return this},zi.visitAfter=function(t){var e,n=[],i=[];for(this._root&&n.push(new Oi(this._root,this._x0,this._y0,this._x1,this._y1));e=n.pop();){var r=e.node;if(r.length){var a,f=e.x0,o=e.y0,c=e.x1,s=e.y1,u=(f+c)/2,h=(o+s)/2;(a=r[0])&&n.push(new Oi(a,f,o,u,h)),(a=r[1])&&n.push(new Oi(a,u,o,c,h)),(a=r[2])&&n.push(new Oi(a,f,h,u,s)),(a=r[3])&&n.push(new Oi(a,u,h,c,s))}i.push(e)}for(;e=i.pop();)t(e.node,e.x0,e.y0,e.x1,e.y1);return this},zi.x=function(t){return arguments.length?(this._x=t,this):this._x},zi.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var $i=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,i=t.slice(0,n);return[i.length>1?i[0]+i.slice(2):i,+t.slice(n+1)]},Bi=function(t){return(t=$i(Math.abs(t)))?t[1]:NaN},Xi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Zi(t){return new Vi(t)}function Vi(t){if(!(e=Xi.exec(t)))throw new Error("invalid format: "+t);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}Zi.prototype=Vi.prototype,Vi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Ji,Wi,Qi=function(t){t:for(var e,n=t.length,i=1,r=-1;i<n;++i)switch(t[i]){case".":r=e=i;break;case"0":0===r&&(r=i),e=i;break;default:if(r>0){if(!+t[i])break t;r=0}}return r>0?t.slice(0,r)+t.slice(e+1):t},Gi=function(t,e){var n=$i(t,e);if(!n)return t+"";var i=n[0],r=n[1];return r<0?"0."+new Array(-r).join("0")+i:i.length>r+1?i.slice(0,r+1)+"."+i.slice(r+1):i+new Array(r-i.length+2).join("0")},Ki={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Gi(100*t,e)},r:Gi,s:function(t,e){var n=$i(t,e);if(!n)return t+"";var i=n[0],r=n[1],a=r-(Ji=3*Math.max(-8,Math.min(8,Math.floor(r/3))))+1,f=i.length;return a===f?i:a>f?i+new Array(a-f+1).join("0"):a>0?i.slice(0,a)+"."+i.slice(a):"0."+new Array(1-a).join("0")+$i(t,Math.max(0,e+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},tr=function(t){return t},er=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];Wi=function(t){var e,n,i=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,i){for(var r=t.length,a=[],f=0,o=e[0],c=0;r>0&&o>0&&(c+o+1>i&&(o=Math.max(1,i-c)),a.push(t.substring(r-=o,r+o)),!((c+=o+1)>i));)o=e[f=(f+1)%e.length];return a.reverse().join(n)}):tr,r=t.currency,a=t.decimal,f=t.numerals?function(t){return function(e){return e.replace(/[0-9]/g,function(e){return t[+e]})}}(t.numerals):tr,o=t.percent||"%";function c(t){var e=(t=Zi(t)).fill,n=t.align,c=t.sign,s=t.symbol,u=t.zero,h=t.width,l=t.comma,d=t.precision,_=t.trim,b=t.type;"n"===b?(l=!0,b="g"):Ki[b]||(null==d&&(d=12),_=!0,b="g"),(u||"0"===e&&"="===n)&&(u=!0,e="0",n="=");var p="$"===s?r[0]:"#"===s&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",y="$"===s?r[1]:/[%p]/.test(b)?o:"",v=Ki[b],g=/[defgprs%]/.test(b);function x(t){var r,o,s,x=p,m=y;if("c"===b)m=v(t)+m,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),_&&(t=Qi(t)),w&&0==+t&&(w=!1),x=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+x,m=("s"===b?er[8+Ji/3]:"")+m+(w&&"("===c?")":""),g)for(r=-1,o=t.length;++r<o;)if(48>(s=t.charCodeAt(r))||s>57){m=(46===s?a+t.slice(r+1):t.slice(r))+m,t=t.slice(0,r);break}}l&&!u&&(t=i(t,1/0));var M=x.length+t.length+m.length,N=M<h?new Array(h-M+1).join(e):"";switch(l&&u&&(t=i(N+t,N.length?h-m.length:1/0),N=""),n){case"<":t=x+t+m+N;break;case"=":t=x+N+t+m;break;case"^":t=N.slice(0,M=N.length>>1)+x+t+m+N.slice(M);break;default:t=N+x+t+m}return f(t)}return d=null==d?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,e){var n=c(((t=Zi(t)).type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Bi(e)/3))),r=Math.pow(10,-i),a=er[8+i/3];return function(t){return n(r*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Wi.format,Wi.formatPrefix;var nr=function(){return new ir};function ir(){this.reset()}ir.prototype={constructor:ir,reset:function(){this.s=this.t=0},add:function(t){ar(rr,t,this.t),ar(this,rr.s,this.s),this.s?this.t+=rr.t:this.s=rr.t},valueOf:function(){return this.s}};var rr=new ir;function ar(t,e,n){var i=t.s=e+n,r=i-e,a=i-r;t.t=e-a+(n-r)}var fr=1e-6,or=1e-12,cr=Math.PI,sr=cr/2,ur=cr/4,hr=2*cr,lr=cr/180,dr=Math.abs,_r=Math.atan,br=Math.atan2,pr=Math.cos,yr=(Math.ceil,Math.exp),vr=(Math.floor,Math.log),gr=(Math.pow,Math.sin),xr=Math.sign||function(t){return t>0?1:t<0?-1:0},mr=Math.sqrt,wr=Math.tan;function Mr(t){return t>1?0:t<-1?cr:Math.acos(t)}function Nr(t){return t>1?sr:t<-1?-sr:Math.asin(t)}function Tr(){}nr(),nr();function Cr(t){var e=t[0],n=t[1],i=pr(n);return[i*pr(e),i*gr(e),gr(n)]}function Ar(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Sr(t){var e=mr(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=e,t[1]/=e,t[2]/=e}nr();function kr(t,e){return[dr(t)>cr?t+Math.round(-t/hr)*hr:t,e]}kr.invert=kr;var Er=function(){var t,e=[];return{point:function(e,n){t.push([e,n])},lineStart:function(){e.push(t=[])},lineEnd:Tr,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var n=e;return e=[],t=null,n}}},Ur=function(t,e){return dr(t[0]-e[0])<fr&&dr(t[1]-e[1])<fr};function Lr(t,e,n,i){this.x=t,this.z=e,this.o=n,this.e=i,this.v=!1,this.n=this.p=null}var Pr=function(t,e,n,i,r){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((e=t.length-1)<=0)){var e,n,i=t[0],f=t[e];if(Ur(i,f)){for(r.lineStart(),a=0;a<e;++a)r.point((i=t[a])[0],i[1]);r.lineEnd()}else o.push(n=new Lr(i,t,null,!0)),c.push(n.o=new Lr(i,null,n,!1)),o.push(n=new Lr(f,t,null,!1)),c.push(n.o=new Lr(f,null,n,!0))}}),o.length){for(c.sort(e),Rr(o),Rr(c),a=0,f=c.length;a<f;++a)c[a].e=n=!n;for(var s,u,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;s=l.z,r.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=s.length;a<f;++a)r.point((u=s[a])[0],u[1]);else i(l.x,l.n.x,1,r);l=l.n}else{if(d)for(s=l.p.z,a=s.length-1;a>=0;--a)r.point((u=s[a])[0],u[1]);else i(l.x,l.p.x,-1,r);l=l.p}s=(l=l.o).z,d=!d}while(!l.v);r.lineEnd()}}};function Rr(t){if(e=t.length){for(var e,n,i=0,r=t[0];++i<e;)r.n=n=t[i],n.p=r,r=n;r.n=n=t[0],n.p=r}}var Dr=nr();function jr(t){return dr(t[0])<=cr?t[0]:xr(t[0])*((dr(t[0])+cr)%hr-cr)}var Or=function(t,e){var n=jr(e),i=e[1],r=gr(i),a=[gr(n),-pr(n),0],f=0,o=0;Dr.reset(),1===r?i=sr+fr:-1===r&&(i=-sr-fr);for(var c=0,s=t.length;c<s;++c)if(h=(u=t[c]).length)for(var u,h,l=u[h-1],d=jr(l),_=l[1]/2+ur,b=gr(_),p=pr(_),y=0;y<h;++y,d=g,b=m,p=w,l=v){var v=u[y],g=jr(v),x=v[1]/2+ur,m=gr(x),w=pr(x),M=g-d,N=M>=0?1:-1,T=N*M,C=T>cr,A=b*m;if(Dr.add(br(A*N*gr(T),p*w+A*pr(T))),f+=C?M+N*hr:M,C^d>=n^g>=n){var S=Ar(Cr(l),Cr(v));Sr(S);var k=Ar(a,S);Sr(k);var E=(C^M>=0?-1:1)*Nr(k[2]);(i>E||i===E&&(S[0]||S[1]))&&(o+=C^M>=0?1:-1)}}return(f<-fr||f<fr&&Dr<-fr)^1&o},Yr=function(t,e,n,i){return function(r){var a,f,c,s=e(r),u=Er(),h=e(u),l=!1,d={point:_,lineStart:p,lineEnd:y,polygonStart:function(){d.point=v,d.lineStart=g,d.lineEnd=x,f=[],a=[]},polygonEnd:function(){d.point=_,d.lineStart=p,d.lineEnd=y,f=o(f);var t=Or(a,i);f.length?(l||(r.polygonStart(),l=!0),Pr(f,qr,t,n,r)):t&&(l||(r.polygonStart(),l=!0),r.lineStart(),n(null,null,1,r),r.lineEnd()),l&&(r.polygonEnd(),l=!1),f=a=null},sphere:function(){r.polygonStart(),r.lineStart(),n(null,null,1,r),r.lineEnd(),r.polygonEnd()}};function _(e,n){t(e,n)&&r.point(e,n)}function b(t,e){s.point(t,e)}function p(){d.point=b,s.lineStart()}function y(){d.point=_,s.lineEnd()}function v(t,e){c.push([t,e]),h.point(t,e)}function g(){h.lineStart(),c=[]}function x(){v(c[0][0],c[0][1]),h.lineEnd();var t,e,n,i,o=h.clean(),s=u.result(),d=s.length;if(c.pop(),a.push(c),c=null,d)if(1&o){if((e=(n=s[0]).length-1)>0){for(l||(r.polygonStart(),l=!0),r.lineStart(),t=0;t<e;++t)r.point((i=n[t])[0],i[1]);r.lineEnd()}}else d>1&&2&o&&s.push(s.pop().concat(s.shift())),f.push(s.filter(Fr))}return d}};function Fr(t){return t.length>1}function qr(t,e){return((t=t.x)[0]<0?t[1]-sr-fr:sr-t[1])-((e=e.x)[0]<0?e[1]-sr-fr:sr-e[1])}Yr(function(){return!0},function(t){var e,n=NaN,i=NaN,r=NaN;return{lineStart:function(){t.lineStart(),e=1},point:function(a,f){var o=a>0?cr:-cr,c=dr(a-n);dr(c-cr)<fr?(t.point(n,i=(i+f)/2>0?sr:-sr),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),t.point(a,i),e=0):r!==o&&c>=cr&&(dr(n-r)<fr&&(n-=r*fr),dr(a-o)<fr&&(a-=o*fr),i=function(t,e,n,i){var r,a,f=gr(t-n);return dr(f)>fr?_r((gr(e)*(a=pr(i))*gr(n)-gr(i)*(r=pr(e))*gr(t))/(r*a*f)):(e+i)/2}(n,i,a,f),t.point(r,i),t.lineEnd(),t.lineStart(),t.point(o,i),e=0),t.point(n=a,i=f),r=o},lineEnd:function(){t.lineEnd(),n=i=NaN},clean:function(){return 2-e}}},function(t,e,n,i){var r;if(null==t)r=n*sr,i.point(-cr,r),i.point(0,r),i.point(cr,r),i.point(cr,0),i.point(cr,-r),i.point(0,-r),i.point(-cr,-r),i.point(-cr,0),i.point(-cr,r);else if(dr(t[0]-e[0])>fr){var a=t[0]<e[0]?cr:-cr;r=n*a/2,i.point(-a,r),i.point(0,r),i.point(a,r)}else i.point(e[0],e[1])},[-cr,-sr]);nr();nr(),nr();function Hr(t){this._context=t}Hr.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,hr)}},result:Tr};nr();function Ir(){this._string=[]}function zr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Ir.prototype={_radius:4.5,_circle:zr(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=zr(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function $r(t){return function(e){var n=new Br;for(var i in t)n[i]=t[i];return n.stream=e,n}}function Br(){}Br.prototype={constructor:Br,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};pr(30*lr);$r({point:function(t,e){this.stream.point(t*lr,e*lr)}});function Xr(t){return function(e,n){var i=pr(e),r=pr(n),a=t(i*r);return[a*r*gr(e),a*gr(n)]}}function Zr(t){return function(e,n){var i=mr(e*e+n*n),r=t(i),a=gr(r),f=pr(r);return[br(e*a,i*f),Nr(i&&n*a/i)]}}var Vr=Xr(function(t){return mr(2/(1+t))});Vr.invert=Zr(function(t){return 2*Nr(t/2)});var Jr=Xr(function(t){return(t=Mr(t))&&t/gr(t)});Jr.invert=Zr(function(t){return t});function Wr(t,e){return[t,vr(wr((sr+e)/2))]}Wr.invert=function(t,e){return[t,2*_r(yr(e))-sr]};function Qr(t,e){return[t,e]}Qr.invert=Qr;var Gr=1.340264,Kr=-.081106,ta=893e-6,ea=.003796,na=mr(3)/2;function ia(t,e){var n=Nr(na*gr(e)),i=n*n,r=i*i*i;return[t*pr(n)/(na*(Gr+3*Kr*i+r*(7*ta+9*ea*i))),n*(Gr+Kr*i+r*(ta+ea*i))]}ia.invert=function(t,e){for(var n,i=e,r=i*i,a=r*r*r,f=0;f<12&&(a=(r=(i-=n=(i*(Gr+Kr*r+a*(ta+ea*r))-e)/(Gr+3*Kr*r+a*(7*ta+9*ea*r)))*i)*r*r,!(dr(n)<or));++f);return[na*t*(Gr+3*Kr*r+a*(7*ta+9*ea*r))/pr(i),Nr(gr(i)/na)]};function ra(t,e){var n=pr(e),i=pr(t)*n;return[n*gr(t)/i,gr(e)/i]}ra.invert=Zr(_r);function aa(t,e){var n=e*e,i=n*n;return[t*(.8707-.131979*n+i*(i*(.003971*n-.001529*i)-.013791)),e*(1.007226+n*(.015085+i*(.028874*n-.044475-.005916*i)))]}aa.invert=function(t,e){var n,i=e,r=25;do{var a=i*i,f=a*a;i-=n=(i*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-e)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(dr(n)>fr&&--r>0);return[t/(.8707+(a=i*i)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),i]};function fa(t,e){return[pr(e)*gr(t),gr(e)]}fa.invert=Zr(Nr);function oa(t,e){var n=pr(e),i=1+pr(t)*n;return[n*gr(t)/i,gr(e)/i]}oa.invert=Zr(function(t){return 2*_r(t)});function ca(t,e){return[vr(wr((sr+e)/2)),-t]}ca.invert=function(t,e){return[-e,2*_r(yr(t))-sr]};function sa(t){var e=0,n=t.children,i=n&&n.length;if(i)for(;--i>=0;)e+=n[i].value;else e=1;t.value=e}function ua(t,e){var n,i,r,a,f,o=new _a(t),c=+t.value&&(o.value=t.value),s=[o];for(null==e&&(e=ha);n=s.pop();)if(c&&(n.value=+n.data.value),(r=e(n.data))&&(f=r.length))for(n.children=new Array(f),a=f-1;a>=0;--a)s.push(i=n.children[a]=new _a(r[a])),i.parent=n,i.depth=n.depth+1;return o.eachBefore(da)}function ha(t){return t.children}function la(t){t.data=t.data.data}function da(t){var e=0;do{t.height=e}while((t=t.parent)&&t.height<++e)}function _a(t){this.data=t,this.depth=this.height=0,this.parent=null}_a.prototype=ua.prototype={constructor:_a,count:function(){return this.eachAfter(sa)},each:function(t){var e,n,i,r,a=this,f=[a];do{for(e=f.reverse(),f=[];a=e.pop();)if(t(a),n=a.children)for(i=0,r=n.length;i<r;++i)f.push(n[i])}while(f.length);return this},eachAfter:function(t){for(var e,n,i,r=this,a=[r],f=[];r=a.pop();)if(f.push(r),e=r.children)for(n=0,i=e.length;n<i;++n)a.push(e[n]);for(;r=f.pop();)t(r);return this},eachBefore:function(t){for(var e,n,i=this,r=[i];i=r.pop();)if(t(i),e=i.children)for(n=e.length-1;n>=0;--n)r.push(e[n]);return this},sum:function(t){return this.eachAfter(function(e){for(var n=+t(e.data)||0,i=e.children,r=i&&i.length;--r>=0;)n+=i[r].value;e.value=n})},sort:function(t){return this.eachBefore(function(e){e.children&&e.children.sort(t)})},path:function(t){for(var e=this,n=function(t,e){if(t===e)return t;var n=t.ancestors(),i=e.ancestors(),r=null;for(t=n.pop(),e=i.pop();t===e;)r=t,t=n.pop(),e=i.pop();return r}(e,t),i=[e];e!==n;)e=e.parent,i.push(e);for(var r=i.length;t!==n;)i.splice(r,0,t),t=t.parent;return i},ancestors:function(){for(var t=this,e=[t];t=t.parent;)e.push(t);return e},descendants:function(){var t=[];return this.each(function(e){t.push(e)}),t},leaves:function(){var t=[];return this.eachBefore(function(e){e.children||t.push(e)}),t},links:function(){var t=this,e=[];return t.each(function(n){n!==t&&e.push({source:n.parent,target:n})}),e},copy:function(){return ua(this).eachBefore(la)}};Array.prototype.slice;var ba=function(t,e,n,i,r){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(i-e)/t.value;++o<c;)(a=f[o]).y0=n,a.y1=r,a.x0=e,a.x1=e+=a.value*s};function pa(t,e){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}pa.prototype=Object.create(_a.prototype);var ya=function(t,e,n,i,r){for(var a,f=t.children,o=-1,c=f.length,s=t.value&&(r-n)/t.value;++o<c;)(a=f[o]).x0=e,a.x1=i,a.y0=n,a.y1=n+=a.value*s},va=(1+Math.sqrt(5))/2;function ga(t,e,n,i,r,a){for(var f,o,c,s,u,h,l,d,_,b,p,y=[],v=e.children,g=0,x=0,m=v.length,w=e.value;g<m;){c=r-n,s=a-i;do{u=v[x++].value}while(!u&&x<m);for(h=l=u,p=u*u*(b=Math.max(s/c,c/s)/(w*t)),_=Math.max(l/p,p/h);x<m;++x){if(u+=o=v[x].value,o<h&&(h=o),o>l&&(l=o),p=u*u*b,(d=Math.max(l/p,p/h))>_){u-=o;break}_=d}y.push(f={value:u,dice:c<s,children:v.slice(g,x)}),f.dice?ba(f,n,i,r,w?i+=s*u/w:a):ya(f,n,i,w?n+=c*u/w:r,a),w-=u,g=x}return y}(function t(e){function n(t,n,i,r,a){ga(e,t,n,i,r,a)}return n.ratio=function(e){return t((e=+e)>1?e:1)},n})(va),function t(e){function n(t,n,i,r,a){if((f=t._squarify)&&f.ratio===e)for(var f,o,c,s,u,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,s=o.value=0,u=c.length;s<u;++s)o.value+=c[s].value;o.dice?ba(o,n,i,r,i+=(a-i)*o.value/d):ya(o,n,i,n+=(r-n)*o.value/d,a),d-=o.value}else t._squarify=f=ga(e,t,n,i,r,a),f.ratio=e}return n.ratio=function(e){return t((e=+e)>1?e:1)},n}(va);var xa=function(){return Math.random()},ma=(function t(e){function n(t,n){return t=null==t?0:+t,n=null==n?1:+n,1===arguments.length?(n=t,t=0):n-=t,function(){return e()*n+t}}return n.source=t,n}(xa),function t(e){function n(t,n){var i,r;return t=null==t?0:+t,n=null==n?1:+n,function(){var a;if(null!=i)a=i,i=null;else do{i=2*e()-1,a=2*e()-1,r=i*i+a*a}while(!r||r>1);return t+n*a*Math.sqrt(-2*Math.log(r)/r)}}return n.source=t,n}(xa)),wa=(function t(e){function n(){var t=ma.source(e).apply(this,arguments);return function(){return Math.exp(t())}}return n.source=t,n}(xa),function t(e){function n(t){return function(){for(var n=0,i=0;i<t;++i)n+=e();return n}}return n.source=t,n}(xa));(function t(e){function n(t){var n=wa.source(e)(t);return function(){return n()/t}}return n.source=t,n})(xa),function t(e){function n(t){return function(){return-Math.log(1-e())/t}}return n.source=t,n}(xa);var Ma=Array.prototype;Ma.map,Ma.slice;var Na=new Date,Ta=new Date;function Ca(t,e,n,i){function r(e){return t(e=new Date(+e)),e}return r.floor=r,r.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},r.round=function(t){var e=r(t),n=r.ceil(t);return t-e<n-t?e:n},r.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},r.range=function(n,i,a){var f,o=[];if(n=r.ceil(n),a=null==a?1:Math.floor(a),!(n<i&&a>0))return o;do{o.push(f=new Date(+n)),e(n,a),t(n)}while(f<n&&n<i);return o},r.filter=function(n){return Ca(function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)},function(t,i){if(t>=t)if(i<0)for(;++i<=0;)for(;e(t,-1),!n(t););else for(;--i>=0;)for(;e(t,1),!n(t););})},n&&(r.count=function(e,i){return Na.setTime(+e),Ta.setTime(+i),t(Na),t(Ta),Math.floor(n(Na,Ta))},r.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?r.filter(i?function(e){return i(e)%t==0}:function(e){return r.count(0,e)%t==0}):r:null}),r}var Aa=Ca(function(){},function(t,e){t.setTime(+t+e)},function(t,e){return e-t});Aa.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Ca(function(e){e.setTime(Math.floor(e/t)*t)},function(e,n){e.setTime(+e+n*t)},function(e,n){return(n-e)/t}):Aa:null};Aa.range;var Sa=6e4,ka=6048e5,Ea=Ca(function(t){t.setTime(t-t.getMilliseconds())},function(t,e){t.setTime(+t+1e3*e)},function(t,e){return(e-t)/1e3},function(t){return t.getUTCSeconds()}),Ua=(Ea.range,Ca(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,e){t.setTime(+t+e*Sa)},function(t,e){return(e-t)/Sa},function(t){return t.getMinutes()})),La=(Ua.range,Ca(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Sa)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getHours()})),Pa=(La.range,Ca(function(t){t.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Sa)/864e5},function(t){return t.getDate()-1})),Ra=Pa;Pa.range;function Da(t){return Ca(function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)},function(t,e){t.setDate(t.getDate()+7*e)},function(t,e){return(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Sa)/ka})}var ja=Da(0),Oa=Da(1),Ya=Da(2),Fa=Da(3),qa=Da(4),Ha=Da(5),Ia=Da(6),za=(ja.range,Oa.range,Ya.range,Fa.range,qa.range,Ha.range,Ia.range,Ca(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,e){t.setMonth(t.getMonth()+e)},function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),$a=(za.range,Ca(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,e){t.setFullYear(t.getFullYear()+e)},function(t,e){return e.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));$a.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ca(function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,n){e.setFullYear(e.getFullYear()+n*t)}):null};var Ba=$a,Xa=($a.range,Ca(function(t){t.setUTCSeconds(0,0)},function(t,e){t.setTime(+t+e*Sa)},function(t,e){return(e-t)/Sa},function(t){return t.getUTCMinutes()})),Za=(Xa.range,Ca(function(t){t.setUTCMinutes(0,0,0)},function(t,e){t.setTime(+t+36e5*e)},function(t,e){return(e-t)/36e5},function(t){return t.getUTCHours()})),Va=(Za.range,Ca(function(t){t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+e)},function(t,e){return(e-t)/864e5},function(t){return t.getUTCDate()-1})),Ja=Va;Va.range;function Wa(t){return Ca(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)},function(t,e){t.setUTCDate(t.getUTCDate()+7*e)},function(t,e){return(e-t)/ka})}var Qa=Wa(0),Ga=Wa(1),Ka=Wa(2),tf=Wa(3),ef=Wa(4),nf=Wa(5),rf=Wa(6),af=(Qa.range,Ga.range,Ka.range,tf.range,ef.range,nf.range,rf.range,Ca(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCMonth(t.getUTCMonth()+e)},function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),ff=(af.range,Ca(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)},function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));ff.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Ca(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)}):null};var of=ff;ff.range;function cf(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function sf(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function uf(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var hf,lf,df,_f={"-":"",_:" ",0:"0"},bf=/^\s*\d+/,pf=/^%/,yf=/[\\^$*+?|[\]().{}]/g;function vf(t,e,n){var i=t<0?"-":"",r=(i?-t:t)+"",a=r.length;return i+(a<n?new Array(n-a+1).join(e)+r:r)}function gf(t){return t.replace(yf,"\\$&")}function xf(t){return new RegExp("^(?:"+t.map(gf).join("|")+")","i")}function mf(t){for(var e={},n=-1,i=t.length;++n<i;)e[t[n].toLowerCase()]=n;return e}function wf(t,e,n){var i=bf.exec(e.slice(n,n+1));return i?(t.w=+i[0],n+i[0].length):-1}function Mf(t,e,n){var i=bf.exec(e.slice(n,n+1));return i?(t.u=+i[0],n+i[0].length):-1}function Nf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.U=+i[0],n+i[0].length):-1}function Tf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.V=+i[0],n+i[0].length):-1}function Cf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.W=+i[0],n+i[0].length):-1}function Af(t,e,n){var i=bf.exec(e.slice(n,n+4));return i?(t.y=+i[0],n+i[0].length):-1}function Sf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.y=+i[0]+(+i[0]>68?1900:2e3),n+i[0].length):-1}function kf(t,e,n){var i=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return i?(t.Z=i[1]?0:-(i[2]+(i[3]||"00")),n+i[0].length):-1}function Ef(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.m=i[0]-1,n+i[0].length):-1}function Uf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.d=+i[0],n+i[0].length):-1}function Lf(t,e,n){var i=bf.exec(e.slice(n,n+3));return i?(t.m=0,t.d=+i[0],n+i[0].length):-1}function Pf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.H=+i[0],n+i[0].length):-1}function Rf(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.M=+i[0],n+i[0].length):-1}function Df(t,e,n){var i=bf.exec(e.slice(n,n+2));return i?(t.S=+i[0],n+i[0].length):-1}function jf(t,e,n){var i=bf.exec(e.slice(n,n+3));return i?(t.L=+i[0],n+i[0].length):-1}function Of(t,e,n){var i=bf.exec(e.slice(n,n+6));return i?(t.L=Math.floor(i[0]/1e3),n+i[0].length):-1}function Yf(t,e,n){var i=pf.exec(e.slice(n,n+1));return i?n+i[0].length:-1}function Ff(t,e,n){var i=bf.exec(e.slice(n));return i?(t.Q=+i[0],n+i[0].length):-1}function qf(t,e,n){var i=bf.exec(e.slice(n));return i?(t.Q=1e3*+i[0],n+i[0].length):-1}function Hf(t,e){return vf(t.getDate(),e,2)}function If(t,e){return vf(t.getHours(),e,2)}function zf(t,e){return vf(t.getHours()%12||12,e,2)}function $f(t,e){return vf(1+Ra.count(Ba(t),t),e,3)}function Bf(t,e){return vf(t.getMilliseconds(),e,3)}function Xf(t,e){return Bf(t,e)+"000"}function Zf(t,e){return vf(t.getMonth()+1,e,2)}function Vf(t,e){return vf(t.getMinutes(),e,2)}function Jf(t,e){return vf(t.getSeconds(),e,2)}function Wf(t){var e=t.getDay();return 0===e?7:e}function Qf(t,e){return vf(ja.count(Ba(t),t),e,2)}function Gf(t,e){var n=t.getDay();return t=n>=4||0===n?qa(t):qa.ceil(t),vf(qa.count(Ba(t),t)+(4===Ba(t).getDay()),e,2)}function Kf(t){return t.getDay()}function to(t,e){return vf(Oa.count(Ba(t),t),e,2)}function eo(t,e){return vf(t.getFullYear()%100,e,2)}function no(t,e){return vf(t.getFullYear()%1e4,e,4)}function io(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+vf(e/60|0,"0",2)+vf(e%60,"0",2)}function ro(t,e){return vf(t.getUTCDate(),e,2)}function ao(t,e){return vf(t.getUTCHours(),e,2)}function fo(t,e){return vf(t.getUTCHours()%12||12,e,2)}function oo(t,e){return vf(1+Ja.count(of(t),t),e,3)}function co(t,e){return vf(t.getUTCMilliseconds(),e,3)}function so(t,e){return co(t,e)+"000"}function uo(t,e){return vf(t.getUTCMonth()+1,e,2)}function ho(t,e){return vf(t.getUTCMinutes(),e,2)}function lo(t,e){return vf(t.getUTCSeconds(),e,2)}function _o(t){var e=t.getUTCDay();return 0===e?7:e}function bo(t,e){return vf(Qa.count(of(t),t),e,2)}function po(t,e){var n=t.getUTCDay();return t=n>=4||0===n?ef(t):ef.ceil(t),vf(ef.count(of(t),t)+(4===of(t).getUTCDay()),e,2)}function yo(t){return t.getUTCDay()}function vo(t,e){return vf(Ga.count(of(t),t),e,2)}function go(t,e){return vf(t.getUTCFullYear()%100,e,2)}function xo(t,e){return vf(t.getUTCFullYear()%1e4,e,4)}function mo(){return"+0000"}function wo(){return"%"}function Mo(t){return+t}function No(t){return Math.floor(+t/1e3)}!function(t){hf=function(t){var e=t.dateTime,n=t.date,i=t.time,r=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,s=xf(r),u=mf(r),h=xf(a),l=mf(a),d=xf(f),_=mf(f),b=xf(o),p=mf(o),y=xf(c),v=mf(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Hf,e:Hf,f:Xf,H:If,I:zf,j:$f,L:Bf,m:Zf,M:Vf,p:function(t){return r[+(t.getHours()>=12)]},Q:Mo,s:No,S:Jf,u:Wf,U:Qf,V:Gf,w:Kf,W:to,x:null,X:null,y:eo,Y:no,Z:io,"%":wo},x={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:ro,e:ro,f:so,H:ao,I:fo,j:oo,L:co,m:uo,M:ho,p:function(t){return r[+(t.getUTCHours()>=12)]},Q:Mo,s:No,S:lo,u:_o,U:bo,V:po,w:yo,W:vo,x:null,X:null,y:go,Y:xo,Z:mo,"%":wo},m={a:function(t,e,n){var i=d.exec(e.slice(n));return i?(t.w=_[i[0].toLowerCase()],n+i[0].length):-1},A:function(t,e,n){var i=h.exec(e.slice(n));return i?(t.w=l[i[0].toLowerCase()],n+i[0].length):-1},b:function(t,e,n){var i=y.exec(e.slice(n));return i?(t.m=v[i[0].toLowerCase()],n+i[0].length):-1},B:function(t,e,n){var i=b.exec(e.slice(n));return i?(t.m=p[i[0].toLowerCase()],n+i[0].length):-1},c:function(t,n,i){return N(t,e,n,i)},d:Uf,e:Uf,f:Of,H:Pf,I:Pf,j:Lf,L:jf,m:Ef,M:Rf,p:function(t,e,n){var i=s.exec(e.slice(n));return i?(t.p=u[i[0].toLowerCase()],n+i[0].length):-1},Q:Ff,s:qf,S:Df,u:Mf,U:Nf,V:Tf,w:wf,W:Cf,x:function(t,e,i){return N(t,n,e,i)},X:function(t,e,n){return N(t,i,e,n)},y:Sf,Y:Af,Z:kf,"%":Yf};function w(t,e){return function(n){var i,r,a,f=[],o=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++o<s;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(r=_f[i=t.charAt(++o)])?i=t.charAt(++o):r="e"===i?" ":"0",(a=e[i])&&(i=a(n,r)),f.push(i),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,e){return function(n){var i,r,a=uf(1900);if(N(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(r=(i=sf(uf(a.y))).getUTCDay(),i=r>4||0===r?Ga.ceil(i):Ga(i),i=Ja.offset(i,7*(a.V-1)),a.y=i.getUTCFullYear(),a.m=i.getUTCMonth(),a.d=i.getUTCDate()+(a.w+6)%7):(r=(i=e(uf(a.y))).getDay(),i=r>4||0===r?Oa.ceil(i):Oa(i),i=Ra.offset(i,7*(a.V-1)),a.y=i.getFullYear(),a.m=i.getMonth(),a.d=i.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),r="Z"in a?sf(uf(a.y)).getUTCDay():e(uf(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(r+5)%7:a.w+7*a.U-(r+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,sf(a)):e(a)}}function N(t,e,n,i){for(var r,a,f=0,o=e.length,c=n.length;f<o;){if(i>=c)return-1;if(37===(r=e.charCodeAt(f++))){if(r=e.charAt(f++),!(a=m[r in _f?e.charAt(f++):r])||(i=a(t,n,i))<0)return-1}else if(r!=n.charCodeAt(i++))return-1}return i}return g.x=w(n,g),g.X=w(i,g),g.c=w(e,g),x.x=w(n,x),x.X=w(i,x),x.c=w(e,x),{format:function(t){var e=w(t+="",g);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",cf);return e.toString=function(){return t},e},utcFormat:function(t){var e=w(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t,sf);return e.toString=function(){return t},e}}}(t),hf.format,hf.parse,lf=hf.utcFormat,df=hf.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||lf("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||df("%Y-%m-%dT%H:%M:%S.%LZ");var To=function(t){for(var e=t.length/6|0,n=new Array(e),i=0;i<e;)n[i]="#"+t.slice(6*i,6*++i);return n},Co=(To("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),To("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),To("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),To("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),To("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),To("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),To("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),To("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),To("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return Fe(t[t.length-1])});Co(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(To)),Co(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(To)),Co(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(To)),Co(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(To)),Co(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(To)),Co(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(To)),Co(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(To)),Co(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(To)),Co(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(To)),Co(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(To)),Co(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(To)),Co(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(To)),Co(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(To)),Co(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(To)),Co(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(To)),Co(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(To)),Co(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(To)),Co(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(To)),Co(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(To)),Co(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(To)),Co(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(To)),Co(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(To)),Co(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(To)),Co(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(To)),Co(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(To)),Co(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(To)),Co(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(To)),rn(ke(300,.5,0),ke(-240,.5,1)),rn(ke(-100,.75,.35),ke(80,1.5,.8)),rn(ke(260,.75,.35),ke(80,1.5,.8)),ke(),Zt(),Math.PI,Math.PI;function Ao(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Ao(To("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Ao(To("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Ao(To("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Ao(To("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var So=1e-12,ko=Math.PI,Eo=2*ko;function Uo(t){this._context=t}Uo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var Lo=function(t){return new Uo(t)};Ro(Lo);function Po(t){this._curve=t}function Ro(t){function e(e){return new Po(t(e))}return e._curve=t,e}Po.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,e){this._curve.point(e*Math.sin(t),e*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Do=Math.sin(ko/10)/Math.sin(7*ko/10),jo=(Math.sin(Eo/10),Math.cos(Eo/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Oo(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Yo(t){this._context=t}Yo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Oo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Fo(t){this._context=t}Fo.prototype={areaStart:jo,areaEnd:jo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x2=t,this._y2=e;break;case 1:this._point=2,this._x3=t,this._y3=e;break;case 2:this._point=3,this._x4=t,this._y4=e,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+e)/6);break;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function qo(t){this._context=t}qo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var n=(this._x0+4*this._x1+t)/6,i=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(n,i):this._context.moveTo(n,i);break;case 3:this._point=4;default:Oo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}};function Ho(t,e){this._basis=new Yo(t),this._beta=e}Ho.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,e=this._y,n=t.length-1;if(n>0)for(var i,r=t[0],a=e[0],f=t[n]-r,o=e[n]-a,c=-1;++c<=n;)i=c/n,this._basis.point(this._beta*t[c]+(1-this._beta)*(r+i*f),this._beta*e[c]+(1-this._beta)*(a+i*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,e){this._x.push(+t),this._y.push(+e)}};(function t(e){function n(t){return 1===e?new Yo(t):new Ho(t,e)}return n.beta=function(e){return t(+e)},n})(.85);function Io(t,e,n){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-e),t._y2+t._k*(t._y1-n),t._x2,t._y2)}function zo(t,e){this._context=t,this._k=(1-e)/6}zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Io(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2,this._x1=t,this._y1=e;break;case 2:this._point=3;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new zo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function $o(t,e){this._context=t,this._k=(1-e)/6}$o.prototype={areaStart:jo,areaEnd:jo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new $o(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Bo(t,e){this._context=t,this._k=(1-e)/6}Bo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Io(this,t,e)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return new Bo(t,e)}return n.tension=function(e){return t(+e)},n})(0);function Xo(t,e,n){var i=t._x1,r=t._y1,a=t._x2,f=t._y2;if(t._l01_a>So){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);i=(i*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,r=(r*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>So){var s=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,u=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*s+t._x1*t._l23_2a-e*t._l12_2a)/u,f=(f*s+t._y1*t._l23_2a-n*t._l12_2a)/u}t._context.bezierCurveTo(i,r,a,f,t._x2,t._y2)}function Zo(t,e){this._context=t,this._alpha=e}Zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Zo(t,e):new zo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Vo(t,e){this._context=t,this._alpha=e}Vo.prototype={areaStart:jo,areaEnd:jo,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=e);break;case 2:this._point=3,this._x5=t,this._y5=e;break;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Vo(t,e):new $o(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Jo(t,e){this._context=t,this._alpha=e}Jo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){if(t=+t,e=+e,this._point){var n=this._x2-t,i=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(n*n+i*i,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Xo(this,t,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function t(e){function n(t){return e?new Jo(t,e):new Bo(t,0)}return n.alpha=function(e){return t(+e)},n})(.5);function Wo(t){this._context=t}Wo.prototype={areaStart:jo,areaEnd:jo,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,e){t=+t,e=+e,this._point?this._context.lineTo(t,e):(this._point=1,this._context.moveTo(t,e))}};function Qo(t){return t<0?-1:1}function Go(t,e,n){var i=t._x1-t._x0,r=e-t._x1,a=(t._y1-t._y0)/(i||r<0&&-0),f=(n-t._y1)/(r||i<0&&-0),o=(a*r+f*i)/(i+r);return(Qo(a)+Qo(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function Ko(t,e){var n=t._x1-t._x0;return n?(3*(t._y1-t._y0)/n-e)/2:e}function tc(t,e,n){var i=t._x0,r=t._y0,a=t._x1,f=t._y1,o=(a-i)/3;t._context.bezierCurveTo(i+o,r+o*e,a-o,f-o*n,a,f)}function ec(t){this._context=t}function nc(t){this._context=new ic(t)}function ic(t){this._context=t}function rc(t){this._context=t}function ac(t){var e,n,i=t.length-1,r=new Array(i),a=new Array(i),f=new Array(i);for(r[0]=0,a[0]=2,f[0]=t[0]+2*t[1],e=1;e<i-1;++e)r[e]=1,a[e]=4,f[e]=4*t[e]+2*t[e+1];for(r[i-1]=2,a[i-1]=7,f[i-1]=8*t[i-1]+t[i],e=1;e<i;++e)n=r[e]/a[e-1],a[e]-=n,f[e]-=n*f[e-1];for(r[i-1]=f[i-1]/a[i-1],e=i-2;e>=0;--e)r[e]=(f[e]-r[e+1])/a[e];for(a[i-1]=(t[i]+r[i-1])/2,e=0;e<i-1;++e)a[e]=2*t[e+1]-r[e+1];return[r,a]}ec.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:tc(this,this._t0,Ko(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){var n=NaN;if(e=+e,(t=+t)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,tc(this,Ko(this,n=Go(this,t,e)),n);break;default:tc(this,this._t0,n=Go(this,t,e))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e,this._t0=n}}},(nc.prototype=Object.create(ec.prototype)).point=function(t,e){ec.prototype.point.call(this,e,t)},ic.prototype={moveTo:function(t,e){this._context.moveTo(e,t)},closePath:function(){this._context.closePath()},lineTo:function(t,e){this._context.lineTo(e,t)},bezierCurveTo:function(t,e,n,i,r,a){this._context.bezierCurveTo(e,t,i,n,a,r)}},rc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,e=this._y,n=t.length;if(n)if(this._line?this._context.lineTo(t[0],e[0]):this._context.moveTo(t[0],e[0]),2===n)this._context.lineTo(t[1],e[1]);else for(var i=ac(t),r=ac(e),a=0,f=1;f<n;++a,++f)this._context.bezierCurveTo(i[0][a],r[0][a],i[1][a],r[1][a],t[f],e[f]);(this._line||0!==this._line&&1===n)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,e){this._x.push(+t),this._y.push(+e)}};function fc(t,e){this._context=t,this._t=e}fc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(t,e);else{var n=this._x*(1-this._t)+t*this._t;this._context.lineTo(n,this._y),this._context.lineTo(n,e)}}this._x=t,this._y=e}};function oc(){this._=null}function cc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function sc(t,e){var n=e,i=e.R,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.R=i.L,n.R&&(n.R.U=n),i.L=n}function uc(t,e){var n=e,i=e.L,r=n.U;r?r.L===n?r.L=i:r.R=i:t._=i,i.U=r,n.U=i,n.L=i.R,n.L&&(n.L.U=n),i.R=n}function hc(t){for(;t.L;)t=t.L;return t}oc.prototype={constructor:oc,insert:function(t,e){var n,i,r;if(t){if(e.P=t,e.N=t.N,t.N&&(t.N.P=e),t.N=e,t.R){for(t=t.R;t.L;)t=t.L;t.L=e}else t.R=e;n=t}else this._?(t=hc(this._),e.P=null,e.N=t,t.P=t.L=e,n=t):(e.P=e.N=null,this._=e,n=null);for(e.L=e.R=null,e.U=n,e.C=!0,t=e;n&&n.C;)n===(i=n.U).L?(r=i.R)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.R&&(sc(this,n),n=(t=n).U),n.C=!1,i.C=!0,uc(this,i)):(r=i.L)&&r.C?(n.C=r.C=!1,i.C=!0,t=i):(t===n.L&&(uc(this,n),n=(t=n).U),n.C=!1,i.C=!0,sc(this,i)),n=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var e,n,i,r=t.U,a=t.L,f=t.R;if(n=a?f?hc(f):a:f,r?r.L===t?r.L=n:r.R=n:this._=n,a&&f?(i=n.C,n.C=t.C,n.L=a,a.U=n,n!==f?(r=n.U,n.U=t.U,t=n.R,r.L=t,n.R=f,f.U=n):(n.U=r,r=n,t=n.R)):(i=t.C,t=n),t&&(t.U=r),!i)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===r.L){if((e=r.R).C&&(e.C=!1,r.C=!0,sc(this,r),e=r.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,uc(this,e),e=r.R),e.C=r.C,r.C=e.R.C=!1,sc(this,r),t=this._;break}}else if((e=r.L).C&&(e.C=!1,r.C=!0,uc(this,r),e=r.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,sc(this,e),e=r.L),e.C=r.C,r.C=e.L.C=!1,uc(this,r),t=this._;break}e.C=!0,t=r,r=r.U}while(!t.C);t&&(t.C=!1)}}};var lc=oc;function dc(t,e,n,i){var r=[null,null],a=Oc.push(r)-1;return r.left=t,r.right=e,n&&bc(r,t,e,n),i&&bc(r,e,t,i),Dc[t.index].halfedges.push(a),Dc[e.index].halfedges.push(a),r}function _c(t,e,n){var i=[e,n];return i.left=t,i}function bc(t,e,n,i){t[0]||t[1]?t.left===n?t[1]=i:t[0]=i:(t[0]=i,t.left=e,t.right=n)}function pc(t,e,n,i,r){var a,f=t[0],o=t[1],c=f[0],s=f[1],u=0,h=1,l=o[0]-c,d=o[1]-s;if(a=e-c,l||!(a>0)){if(a/=l,l<0){if(a<u)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>u&&(u=a)}if(a=i-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>u&&(u=a)}else if(l>0){if(a<u)return;a<h&&(h=a)}if(a=n-s,d||!(a>0)){if(a/=d,d<0){if(a<u)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>u&&(u=a)}if(a=r-s,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>u&&(u=a)}else if(d>0){if(a<u)return;a<h&&(h=a)}return!(u>0||h<1)||(u>0&&(t[0]=[c+u*l,s+u*d]),h<1&&(t[1]=[c+h*l,s+h*d]),!0)}}}}}function yc(t,e,n,i,r){var a=t[1];if(a)return!0;var f,o,c=t[0],s=t.left,u=t.right,h=s[0],l=s[1],d=u[0],_=u[1],b=(h+d)/2,p=(l+_)/2;if(_===l){if(b<e||b>=i)return;if(h>d){if(c){if(c[1]>=r)return}else c=[b,n];a=[b,r]}else{if(c){if(c[1]<n)return}else c=[b,r];a=[b,n]}}else if(o=p-(f=(h-d)/(_-l))*b,f<-1||f>1)if(h>d){if(c){if(c[1]>=r)return}else c=[(n-o)/f,n];a=[(r-o)/f,r]}else{if(c){if(c[1]<n)return}else c=[(r-o)/f,r];a=[(n-o)/f,n]}else if(l<_){if(c){if(c[0]>=i)return}else c=[e,f*e+o];a=[i,f*i+o]}else{if(c){if(c[0]<e)return}else c=[i,f*i+o];a=[e,f*e+o]}return t[0]=c,t[1]=a,!0}function vc(t,e){var n=t.site,i=e.left,r=e.right;return n===r&&(r=i,i=n),r?Math.atan2(r[1]-i[1],r[0]-i[0]):(n===i?(i=e[1],r=e[0]):(i=e[0],r=e[1]),Math.atan2(i[0]-r[0],r[1]-i[1]))}function gc(t,e){return e[+(e.left!==t.site)]}function xc(t,e){return e[+(e.left===t.site)]}var mc,wc=[];function Mc(){cc(this),this.x=this.y=this.arc=this.site=this.cy=null}function Nc(t){var e=t.P,n=t.N;if(e&&n){var i=e.site,r=t.site,a=n.site;if(i!==a){var f=r[0],o=r[1],c=i[0]-f,s=i[1]-o,u=a[0]-f,h=a[1]-o,l=2*(c*h-s*u);if(!(l>=-Fc)){var d=c*c+s*s,_=u*u+h*h,b=(h*d-s*_)/l,p=(c*_-u*d)/l,y=wc.pop()||new Mc;y.arc=t,y.site=r,y.x=b+f,y.y=(y.cy=p+o)+Math.sqrt(b*b+p*p),t.circle=y;for(var v=null,g=jc._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}jc.insert(v,y),v||(mc=y)}}}}function Tc(t){var e=t.circle;e&&(e.P||(mc=e.N),jc.remove(e),wc.push(e),cc(e),t.circle=null)}var Cc=[];function Ac(){cc(this),this.edge=this.site=this.circle=null}function Sc(t){var e=Cc.pop()||new Ac;return e.site=t,e}function kc(t){Tc(t),Rc.remove(t),Cc.push(t),cc(t)}function Ec(t){var e=t.circle,n=e.x,i=e.cy,r=[n,i],a=t.P,f=t.N,o=[t];kc(t);for(var c=a;c.circle&&Math.abs(n-c.circle.x)<Yc&&Math.abs(i-c.circle.cy)<Yc;)a=c.P,o.unshift(c),kc(c),c=a;o.unshift(c),Tc(c);for(var s=f;s.circle&&Math.abs(n-s.circle.x)<Yc&&Math.abs(i-s.circle.cy)<Yc;)f=s.N,o.push(s),kc(s),s=f;o.push(s),Tc(s);var u,h=o.length;for(u=1;u<h;++u)s=o[u],c=o[u-1],bc(s.edge,c.site,s.site,r);c=o[0],(s=o[h-1]).edge=dc(c.site,s.site,null,r),Nc(c),Nc(s)}function Uc(t){for(var e,n,i,r,a=t[0],f=t[1],o=Rc._;o;)if((i=Lc(o,f)-a)>Yc)o=o.L;else{if(!((r=a-Pc(o,f))>Yc)){i>-Yc?(e=o.P,n=o):r>-Yc?(e=o,n=o.N):e=n=o;break}if(!o.R){e=o;break}o=o.R}!function(t){Dc[t.index]={site:t,halfedges:[]}}(t);var c=Sc(t);if(Rc.insert(e,c),e||n){if(e===n)return Tc(e),n=Sc(e.site),Rc.insert(c,n),c.edge=n.edge=dc(e.site,c.site),Nc(e),void Nc(n);if(n){Tc(e),Tc(n);var s=e.site,u=s[0],h=s[1],l=t[0]-u,d=t[1]-h,_=n.site,b=_[0]-u,p=_[1]-h,y=2*(l*p-d*b),v=l*l+d*d,g=b*b+p*p,x=[(p*v-d*g)/y+u,(l*g-b*v)/y+h];bc(n.edge,s,_,x),c.edge=dc(s,t,null,x),n.edge=dc(t,_,null,x),Nc(e),Nc(n)}else c.edge=dc(e.site,c.site)}}function Lc(t,e){var n=t.site,i=n[0],r=n[1],a=r-e;if(!a)return i;var f=t.P;if(!f)return-1/0;var o=(n=f.site)[0],c=n[1],s=c-e;if(!s)return o;var u=o-i,h=1/a-1/s,l=u/s;return h?(-l+Math.sqrt(l*l-2*h*(u*u/(-2*s)-c+s/2+r-a/2)))/h+i:(i+o)/2}function Pc(t,e){var n=t.N;if(n)return Lc(n,e);var i=t.site;return i[1]===e?i[0]:1/0}var Rc,Dc,jc,Oc,Yc=1e-6,Fc=1e-12;function qc(t,e){return e[1]-t[1]||e[0]-t[0]}function Hc(t,e){var n,i,r,a=t.sort(qc).pop();for(Oc=[],Dc=new Array(t.length),Rc=new lc,jc=new lc;;)if(r=mc,a&&(!r||a[1]<r.y||a[1]===r.y&&a[0]<r.x))a[0]===n&&a[1]===i||(Uc(a),n=a[0],i=a[1]),a=t.pop();else{if(!r)break;Ec(r.arc)}if(function(){for(var t,e,n,i,r=0,a=Dc.length;r<a;++r)if((t=Dc[r])&&(i=(e=t.halfedges).length)){var f=new Array(i),o=new Array(i);for(n=0;n<i;++n)f[n]=n,o[n]=vc(t,Oc[e[n]]);for(f.sort(function(t,e){return o[e]-o[t]}),n=0;n<i;++n)o[n]=e[f[n]];for(n=0;n<i;++n)e[n]=o[n]}}(),e){var f=+e[0][0],o=+e[0][1],c=+e[1][0],s=+e[1][1];!function(t,e,n,i){for(var r,a=Oc.length;a--;)yc(r=Oc[a],t,e,n,i)&&pc(r,t,e,n,i)&&(Math.abs(r[0][0]-r[1][0])>Yc||Math.abs(r[0][1]-r[1][1])>Yc)||delete Oc[a]}(f,o,c,s),function(t,e,n,i){var r,a,f,o,c,s,u,h,l,d,_,b,p=Dc.length,y=!0;for(r=0;r<p;++r)if(a=Dc[r]){for(f=a.site,o=(c=a.halfedges).length;o--;)Oc[c[o]]||c.splice(o,1);for(o=0,s=c.length;o<s;)_=(d=xc(a,Oc[c[o]]))[0],b=d[1],h=(u=gc(a,Oc[c[++o%s]]))[0],l=u[1],(Math.abs(_-h)>Yc||Math.abs(b-l)>Yc)&&(c.splice(o,0,Oc.push(_c(f,d,Math.abs(_-t)<Yc&&i-b>Yc?[t,Math.abs(h-t)<Yc?l:i]:Math.abs(b-i)<Yc&&n-_>Yc?[Math.abs(l-i)<Yc?h:n,i]:Math.abs(_-n)<Yc&&b-e>Yc?[n,Math.abs(h-n)<Yc?l:e]:Math.abs(b-e)<Yc&&_-t>Yc?[Math.abs(l-e)<Yc?h:t,e]:null))-1),++s);s&&(y=!1)}if(y){var v,g,x,m=1/0;for(r=0,y=null;r<p;++r)(a=Dc[r])&&(x=(v=(f=a.site)[0]-t)*v+(g=f[1]-e)*g)<m&&(m=x,y=a);if(y){var w=[t,e],M=[t,i],N=[n,i],T=[n,e];y.halfedges.push(Oc.push(_c(f=y.site,w,M))-1,Oc.push(_c(f,M,N))-1,Oc.push(_c(f,N,T))-1,Oc.push(_c(f,T,w))-1)}}for(r=0;r<p;++r)(a=Dc[r])&&(a.halfedges.length||delete Dc[r])}(f,o,c,s)}this.edges=Oc,this.cells=Dc,Rc=jc=Oc=Dc=null}Hc.prototype={constructor:Hc,polygons:function(){var t=this.edges;return this.cells.map(function(e){var n=e.halfedges.map(function(n){return gc(e,t[n])});return n.data=e.site.data,n})},triangles:function(){var t=[],e=this.edges;return this.cells.forEach(function(n,i){if(a=(r=n.halfedges).length)for(var r,a,f,o,c,s,u=n.site,h=-1,l=e[r[a-1]],d=l.left===u?l.right:l.left;++h<a;)f=d,d=(l=e[r[h]]).left===u?l.right:l.left,f&&d&&i<f.index&&i<d.index&&(c=f,s=d,((o=u)[0]-s[0])*(c[1]-o[1])-(o[0]-c[0])*(s[1]-o[1])<0)&&t.push([u.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,e,n){for(var i,r,a=this,f=a._found||0,o=a.cells.length;!(r=a.cells[f]);)if(++f>=o)return null;var c=t-r.site[0],s=e-r.site[1],u=c*c+s*s;do{r=a.cells[i=f],f=null,r.halfedges.forEach(function(n){var i=a.edges[n],o=i.left;if(o!==r.site&&o||(o=i.right)){var c=t-o[0],s=e-o[1],h=c*c+s*s;h<u&&(u=h,f=o.index)}})}while(null!==f);return a._found=i,null==n||u<=n*n?r.site:null}};function Ic(t,e,n){this.k=t,this.x=e,this.y=n}Ic.prototype={constructor:Ic,scale:function(t){return 1===t?this:new Ic(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Ic(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Ic(1,0,0);Ic.prototype;n(1),wt("body").append("svg").attr("id","chart")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
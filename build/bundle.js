!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){t.exports=e(6)},function(t,n,e){var r=e(2);"string"==typeof r&&(r=[[t.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};e(4)(r,i);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(3)(!1)).push([t.i,"html, body {\n  padding: 0;\n  margin: 0;\n}\n\n.axis path, .axis line {\n  fill: none;\n  stroke: #eee;\n  shape-rendering: crispEdges;\n}\n\n.axis text {\n  font-size: 11px;\n}\n\n.bar {\n  fill: steelblue;\n}\n",""])},function(t,n,e){"use strict";t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var i=(f=r,o=btoa(unescape(encodeURIComponent(JSON.stringify(f)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),"/*# ".concat(c," */")),a=r.sources.map(function(t){return"/*# sourceURL=".concat(r.sourceRoot).concat(t," */")});return[e].concat(a).concat([i]).join("\n")}var f,o,c;return[e].join("\n")}(n,t);return n[2]?"@media ".concat(n[2],"{").concat(e,"}"):e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var f=0;f<t.length;f++){var o=t[f];null!=o[0]&&r[o[0]]||(e&&!o[2]?o[2]=e:e&&(o[2]="(".concat(o[2],") and (").concat(e,")")),n.push(o))}},n}},function(t,n,e){var r,i,a={},f=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),c=null,u=0,s=[],h=e(5);function l(t,n){for(var e=0;e<t.length;e++){var r=t[e],i=a[r.id];if(i){i.refs++;for(var f=0;f<i.parts.length;f++)i.parts[f](r.parts[f]);for(;f<r.parts.length;f++)i.parts.push(v(r.parts[f],n))}else{var o=[];for(f=0;f<r.parts.length;f++)o.push(v(r.parts[f],n));a[r.id]={id:r.id,refs:1,parts:o}}}}function d(t,n){for(var e=[],r={},i=0;i<t.length;i++){var a=t[i],f=n.base?a[0]+n.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[f]?r[f].parts.push(o):e.push(r[f]={id:f,parts:[o]})}return e}function _(t,n){var e=o(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=s[s.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),s.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(t.insertAt.before,e);e.insertBefore(n,i)}}function b(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=s.indexOf(t);n>=0&&s.splice(n,1)}function p(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return y(n,t.attrs),_(t,n),n}function y(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function v(t,n){var e,r,i,a;if(n.transform&&t.css){if(!(a="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=a}if(n.singleton){var f=u++;e=c||(c=p(n)),r=x.bind(null,e,f,!1),i=x.bind(null,e,f,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",y(n,t.attrs),_(t,n),n}(n),r=function(t,n,e){var r=e.css,i=e.sourceMap,a=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||a)&&(r=h(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var f=new Blob([r],{type:"text/css"}),o=t.href;t.href=URL.createObjectURL(f),o&&URL.revokeObjectURL(o)}.bind(null,e,n),i=function(){b(e),e.href&&URL.revokeObjectURL(e.href)}):(e=p(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),i=function(){b(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else i()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=f()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=d(t,n);return l(e,n),function(t){for(var r=[],i=0;i<e.length;i++){var f=e[i];(o=a[f.id]).refs--,r.push(o)}t&&l(d(t,n),n);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var c=0;c<o.parts.length;c++)o.parts[c]();delete a[o.id]}}}};var g,m=(g=[],function(t,n){return g[t]=n,g.filter(Boolean).join("\n")});function x(t,n,e,r){var i=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=m(n,i);else{var a=document.createTextNode(i),f=t.childNodes;f[n]&&t.removeChild(f[n]),f.length?t.insertBefore(a,f[n]):t.appendChild(a)}}},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var i,a=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?t:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?e+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}};var a=i(r),f=a.right,o=(a.left,f);var c=function(t){return null===t?NaN:+t},u=Array.prototype,s=(u.slice,u.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),a=new Array(i);++r<i;)a[r]=t+r*e;return a}),h=Math.sqrt(50),l=Math.sqrt(10),d=Math.sqrt(2),_=function(t,n,e){var r,i,a,f,o=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(f=b(t,n,e))||!isFinite(f))return[];if(f>0)for(t=Math.ceil(t/f),n=Math.floor(n/f),a=new Array(i=Math.ceil(n-t+1));++o<i;)a[o]=(t+o)*f;else for(t=Math.floor(t*f),n=Math.ceil(n*f),a=new Array(i=Math.ceil(t-n+1));++o<i;)a[o]=(t-o)/f;return r&&a.reverse(),a};function b(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=h?10:a>=l?5:a>=d?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=h?10:a>=l?5:a>=d?2:1)}function p(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=h?i*=10:a>=l?i*=5:a>=d&&(i*=2),n<t?-i:i}var y=function(t,n){var e,r,i=t.length,a=-1;if(null==n){for(;++a<i;)if(null!=(e=t[a])&&e>=e)for(r=e;++a<i;)null!=(e=t[a])&&e>r&&(r=e)}else for(;++a<i;)if(null!=(e=n(t[a],a,t))&&e>=e)for(r=e;++a<i;)null!=(e=n(t[a],a,t))&&e>r&&(r=e);return r},v=function(t,n){var e,r=t.length,i=r,a=-1,f=0;if(null==n)for(;++a<r;)isNaN(e=c(t[a]))?--i:f+=e;else for(;++a<r;)isNaN(e=c(n(t[a],a,t)))?--i:f+=e;if(i)return f/i},g=function(t){for(var n,e,r,i=t.length,a=-1,f=0;++a<i;)f+=t[a].length;for(e=new Array(f);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--f]=r[n];return e};var m=Array.prototype.slice,x=function(t){return t},w=1,M=2,N=3,T=4,C=1e-6;function A(t){return"translate("+(t+.5)+",0)"}function k(t){return"translate(0,"+(t+.5)+")"}function S(){return!this.__axis}function E(t,n){var e=[],r=null,i=null,a=6,f=6,o=3,c=t===w||t===T?-1:1,u=t===T||t===M?"x":"y",s=t===w||t===N?A:k;function h(h){var l=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):x:i,_=Math.max(a,0)+o,b=n.range(),p=+b[0]+.5,y=+b[b.length-1]+.5,v=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),g=h.selection?h.selection():h,m=g.selectAll(".domain").data([null]),A=g.selectAll(".tick").data(l,n).order(),k=A.exit(),E=A.enter().append("g").attr("class","tick"),U=A.select("line"),L=A.select("text");m=m.merge(m.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(E),U=U.merge(E.append("line").attr("stroke","currentColor").attr(u+"2",c*a)),L=L.merge(E.append("text").attr("fill","currentColor").attr(u,c*_).attr("dy",t===w?"0em":t===N?"0.71em":"0.32em")),h!==g&&(m=m.transition(h),A=A.transition(h),U=U.transition(h),L=L.transition(h),k=k.transition(h).attr("opacity",C).attr("transform",function(t){return isFinite(t=v(t))?s(t):this.getAttribute("transform")}),E.attr("opacity",C).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:v(t))})),k.remove(),m.attr("d",t===T||t==M?f?"M"+c*f+","+p+"H0.5V"+y+"H"+c*f:"M0.5,"+p+"V"+y:f?"M"+p+","+c*f+"V0.5H"+y+"V"+c*f:"M"+p+",0.5H"+y),A.attr("opacity",1).attr("transform",function(t){return s(v(t))}),U.attr(u+"2",c*a),L.attr(u,c*_).text(d),g.filter(S).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===M?"start":t===T?"end":"middle"),g.each(function(){this.__axis=v})}return h.scale=function(t){return arguments.length?(n=t,h):n},h.ticks=function(){return e=m.call(arguments),h},h.tickArguments=function(t){return arguments.length?(e=null==t?[]:m.call(t),h):e.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:m.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=f=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(f=+t,h):f},h.tickPadding=function(t){return arguments.length?(o=+t,h):o},h}var U={value:function(){}};function L(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new P(r)}function P(t){this._=t}function R(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function D(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function j(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=U,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}P.prototype=L.prototype={constructor:P,on:function(t,n){var e,r=this._,i=R(t+"",r),a=-1,f=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<f;)if(e=(t=i[a]).type)r[e]=j(r[e],t.name,n);else if(null==n)for(e in r)r[e]=j(r[e],t.name,null);return this}for(;++a<f;)if((e=(t=i[a]).type)&&(e=D(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new P(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),a=0;a<e;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,e=(r=this._[t]).length;a<e;++a)r[a].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(n,e)}};var F=L,H="http://www.w3.org/1999/xhtml",O={svg:"http://www.w3.org/2000/svg",xhtml:H,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Y=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),O.hasOwnProperty(n)?{space:O[n],local:t}:t};var q=function(t){var n=Y(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===H&&n.documentElement.namespaceURI===H?n.createElement(t):n.createElementNS(e,t)}})(n)};function I(){}var z=function(t){return null==t?I:function(){return this.querySelector(t)}};function $(){return[]}var B=function(t){return null==t?$:function(){return this.querySelectorAll(t)}},X=function(t){return function(){return this.matches(t)}},V=function(t){return new Array(t.length)};function Z(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Z.prototype={constructor:Z,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var W="$";function J(t,n,e,r,i,a){for(var f,o=0,c=n.length,u=a.length;o<u;++o)(f=n[o])?(f.__data__=a[o],r[o]=f):e[o]=new Z(t,a[o]);for(;o<c;++o)(f=n[o])&&(i[o]=f)}function Q(t,n,e,r,i,a,f){var o,c,u,s={},h=n.length,l=a.length,d=new Array(h);for(o=0;o<h;++o)(c=n[o])&&(d[o]=u=W+f.call(c,c.__data__,o,n),u in s?i[o]=c:s[u]=c);for(o=0;o<l;++o)(c=s[u=W+f.call(t,a[o],o,a)])?(r[o]=c,c.__data__=a[o],s[u]=null):e[o]=new Z(t,a[o]);for(o=0;o<h;++o)(c=n[o])&&s[d[o]]===c&&(i[o]=c)}function G(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function K(t){return function(){this.removeAttribute(t)}}function tt(t){return function(){this.removeAttributeNS(t.space,t.local)}}function nt(t,n){return function(){this.setAttribute(t,n)}}function et(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function rt(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function it(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var at=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function ft(t){return function(){this.style.removeProperty(t)}}function ot(t,n,e){return function(){this.style.setProperty(t,n,e)}}function ct(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function ut(t,n){return t.style.getPropertyValue(n)||at(t).getComputedStyle(t,null).getPropertyValue(n)}function st(t){return function(){delete this[t]}}function ht(t,n){return function(){this[t]=n}}function lt(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function dt(t){return t.trim().split(/^|\s+/)}function _t(t){return t.classList||new bt(t)}function bt(t){this._node=t,this._names=dt(t.getAttribute("class")||"")}function pt(t,n){for(var e=_t(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function yt(t,n){for(var e=_t(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function vt(t){return function(){pt(this,t)}}function gt(t){return function(){yt(this,t)}}function mt(t,n){return function(){(n.apply(this,arguments)?pt:yt)(this,t)}}bt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function xt(){this.textContent=""}function wt(t){return function(){this.textContent=t}}function Mt(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Nt(){this.innerHTML=""}function Tt(t){return function(){this.innerHTML=t}}function Ct(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function At(){this.nextSibling&&this.parentNode.appendChild(this)}function kt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function St(){return null}function Et(){var t=this.parentNode;t&&t.removeChild(this)}function Ut(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Lt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Pt={},Rt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Pt={mouseenter:"mouseover",mouseleave:"mouseout"}));function Dt(t,n,e){return t=jt(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function jt(t,n,e){return function(r){var i=Rt;Rt=r;try{t.call(this,this.__data__,n,e)}finally{Rt=i}}}function Ft(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function Ht(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,a=n.length;r<a;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ot(t,n,e){var r=Pt.hasOwnProperty(t.type)?Dt:jt;return function(i,a,f){var o,c=this.__on,u=r(n,a,f);if(c)for(var s=0,h=c.length;s<h;++s)if((o=c[s]).type===t.type&&o.name===t.name)return this.removeEventListener(o.type,o.listener,o.capture),this.addEventListener(o.type,o.listener=u,o.capture=e),void(o.value=n);this.addEventListener(t.type,u,e),o={type:t.type,name:t.name,value:n,listener:u,capture:e},c?c.push(o):this.__on=[o]}}function Yt(t,n,e){var r=at(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var qt=[null];function It(t,n){this._groups=t,this._parents=n}function zt(){return new It([[document.documentElement]],qt)}It.prototype=zt.prototype={constructor:It,select:function(t){"function"!=typeof t&&(t=z(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f,o=n[i],c=o.length,u=r[i]=new Array(c),s=0;s<c;++s)(a=o[s])&&(f=t.call(a,a.__data__,s,o))&&("__data__"in a&&(f.__data__=a.__data__),u[s]=f);return new It(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=B(t));for(var n=this._groups,e=n.length,r=[],i=[],a=0;a<e;++a)for(var f,o=n[a],c=o.length,u=0;u<c;++u)(f=o[u])&&(r.push(t.call(f,f.__data__,u,o)),i.push(f));return new It(r,i)},filter:function(t){"function"!=typeof t&&(t=X(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new It(r,this._parents)},data:function(t,n){if(!t)return _=new Array(this.size()),s=-1,this.each(function(t){_[++s]=t}),_;var e,r=n?Q:J,i=this._parents,a=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var f=a.length,o=new Array(f),c=new Array(f),u=new Array(f),s=0;s<f;++s){var h=i[s],l=a[s],d=l.length,_=t.call(h,h&&h.__data__,s,i),b=_.length,p=c[s]=new Array(b),y=o[s]=new Array(b);r(h,l,p,y,u[s]=new Array(d),_,n);for(var v,g,m=0,x=0;m<b;++m)if(v=p[m]){for(m>=x&&(x=m+1);!(g=y[x])&&++x<b;);v._next=g||null}}return(o=new It(o,i))._enter=c,o._exit=u,o},enter:function(){return new It(this._enter||this._groups.map(V),this._parents)},exit:function(){return new It(this._exit||this._groups.map(V),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?a.remove():e(a),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new It(f,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],a=i.length-1,f=i[a];--a>=0;)(r=i[a])&&(f&&4^r.compareDocumentPosition(f)&&f.parentNode.insertBefore(r,f),f=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=G);for(var e=this._groups,r=e.length,i=new Array(r),a=0;a<r;++a){for(var f,o=e[a],c=o.length,u=i[a]=new Array(c),s=0;s<c;++s)(f=o[s])&&(u[s]=f);u.sort(n)}return new It(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,a=r.length;i<a;++i){var f=r[i];if(f)return f}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,a=n[e],f=0,o=a.length;f<o;++f)(i=a[f])&&t.call(i,i.__data__,f,a);return this},attr:function(t,n){var e=Y(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?tt:K:"function"==typeof n?e.local?it:rt:e.local?et:nt)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?ft:"function"==typeof n?ct:ot)(t,n,null==e?"":e)):ut(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?st:"function"==typeof n?lt:ht)(t,n)):this.node()[t]},classed:function(t,n){var e=dt(t+"");if(arguments.length<2){for(var r=_t(this.node()),i=-1,a=e.length;++i<a;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?mt:n?vt:gt)(e,n))},text:function(t){return arguments.length?this.each(null==t?xt:("function"==typeof t?Mt:wt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Nt:("function"==typeof t?Ct:Tt)(t)):this.node().innerHTML},raise:function(){return this.each(At)},lower:function(){return this.each(kt)},append:function(t){var n="function"==typeof t?t:q(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:q(t),r=null==n?St:"function"==typeof n?n:z(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Et)},clone:function(t){return this.select(t?Lt:Ut)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,a=Ft(t+""),f=a.length;if(!(arguments.length<2)){for(o=n?Ot:Ht,null==e&&(e=!1),r=0;r<f;++r)this.each(o(a[r],n,e));return this}var o=this.node().__on;if(o)for(var c,u=0,s=o.length;u<s;++u)for(r=0,c=o[u];r<f;++r)if((i=a[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Yt(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Yt(this,t,n)}})(t,n))}};var $t=zt,Bt=function(t){return"string"==typeof t?new It([[document.querySelector(t)]],[document.documentElement]):new It([[t]],qt)},Xt=0;function Vt(){this._="@"+(++Xt).toString(36)}Vt.prototype=function(){return new Vt}.prototype={constructor:Vt,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};function Zt(t,n,e,r,i,a,f,o,c,u){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=a,this.y=f,this.dx=o,this.dy=c,this._=u}Zt.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var Wt=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function Jt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Qt(){}var Gt="\\s*([+-]?\\d+)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",tn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",nn=/^#([0-9a-f]{3})$/,en=/^#([0-9a-f]{6})$/,rn=new RegExp("^rgb\\("+[Gt,Gt,Gt]+"\\)$"),an=new RegExp("^rgb\\("+[tn,tn,tn]+"\\)$"),fn=new RegExp("^rgba\\("+[Gt,Gt,Gt,Kt]+"\\)$"),on=new RegExp("^rgba\\("+[tn,tn,tn,Kt]+"\\)$"),cn=new RegExp("^hsl\\("+[Kt,tn,tn]+"\\)$"),un=new RegExp("^hsla\\("+[Kt,tn,tn,Kt]+"\\)$"),sn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function hn(){return this.rgb().formatHex()}function ln(){return this.rgb().formatRgb()}function dn(t){var n;return t=(t+"").trim().toLowerCase(),(n=nn.exec(t))?new vn((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=en.exec(t))?_n(parseInt(n[1],16)):(n=rn.exec(t))?new vn(n[1],n[2],n[3],1):(n=an.exec(t))?new vn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=fn.exec(t))?bn(n[1],n[2],n[3],n[4]):(n=on.exec(t))?bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=cn.exec(t))?wn(n[1],n[2]/100,n[3]/100,1):(n=un.exec(t))?wn(n[1],n[2]/100,n[3]/100,n[4]):sn.hasOwnProperty(t)?_n(sn[t]):"transparent"===t?new vn(NaN,NaN,NaN,0):null}function _n(t){return new vn(t>>16&255,t>>8&255,255&t,1)}function bn(t,n,e,r){return r<=0&&(t=n=e=NaN),new vn(t,n,e,r)}function pn(t){return t instanceof Qt||(t=dn(t)),t?new vn((t=t.rgb()).r,t.g,t.b,t.opacity):new vn}function yn(t,n,e,r){return 1===arguments.length?pn(t):new vn(t,n,e,null==r?1:r)}function vn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function gn(){return"#"+xn(this.r)+xn(this.g)+xn(this.b)}function mn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function xn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function wn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Tn(t,n,e,r)}function Mn(t){if(t instanceof Tn)return new Tn(t.h,t.s,t.l,t.opacity);if(t instanceof Qt||(t=dn(t)),!t)return new Tn;if(t instanceof Tn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),a=Math.max(n,e,r),f=NaN,o=a-i,c=(a+i)/2;return o?(f=n===a?(e-r)/o+6*(e<r):e===a?(r-n)/o+2:(n-e)/o+4,o/=c<.5?a+i:2-a-i,f*=60):o=c>0&&c<1?0:f,new Tn(f,o,c,t.opacity)}function Nn(t,n,e,r){return 1===arguments.length?Mn(t):new Tn(t,n,e,null==r?1:r)}function Tn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Cn(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}Wt(Qt,dn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:hn,formatHex:hn,formatHsl:function(){return Mn(this).formatHsl()},formatRgb:ln,toString:ln}),Wt(vn,yn,Jt(Qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new vn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:gn,formatHex:gn,formatRgb:mn,toString:mn})),Wt(Tn,Nn,Jt(Qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Tn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Tn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new vn(Cn(t>=240?t-240:t+120,i,r),Cn(t,i,r),Cn(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var An=Math.PI/180,kn=180/Math.PI,Sn=.96422,En=1,Un=.82521,Ln=4/29,Pn=6/29,Rn=3*Pn*Pn,Dn=Pn*Pn*Pn;function jn(t){if(t instanceof Hn)return new Hn(t.l,t.a,t.b,t.opacity);if(t instanceof Bn)return Xn(t);t instanceof vn||(t=pn(t));var n,e,r=In(t.r),i=In(t.g),a=In(t.b),f=On((.2225045*r+.7168786*i+.0606169*a)/En);return r===i&&i===a?n=e=f:(n=On((.4360747*r+.3850649*i+.1430804*a)/Sn),e=On((.0139322*r+.0971045*i+.7141733*a)/Un)),new Hn(116*f-16,500*(n-f),200*(f-e),t.opacity)}function Fn(t,n,e,r){return 1===arguments.length?jn(t):new Hn(t,n,e,null==r?1:r)}function Hn(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function On(t){return t>Dn?Math.pow(t,1/3):t/Rn+Ln}function Yn(t){return t>Pn?t*t*t:Rn*(t-Ln)}function qn(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function In(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function zn(t){if(t instanceof Bn)return new Bn(t.h,t.c,t.l,t.opacity);if(t instanceof Hn||(t=jn(t)),0===t.a&&0===t.b)return new Bn(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*kn;return new Bn(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function $n(t,n,e,r){return 1===arguments.length?zn(t):new Bn(t,n,e,null==r?1:r)}function Bn(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Xn(t){if(isNaN(t.h))return new Hn(t.l,0,0,t.opacity);var n=t.h*An;return new Hn(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}Wt(Hn,Fn,Jt(Qt,{brighter:function(t){return new Hn(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Hn(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new vn(qn(3.1338561*(n=Sn*Yn(n))-1.6168667*(t=En*Yn(t))-.4906146*(e=Un*Yn(e))),qn(-.9787684*n+1.9161415*t+.033454*e),qn(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),Wt(Bn,$n,Jt(Qt,{brighter:function(t){return new Bn(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Bn(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Xn(this).rgb()}}));var Vn=-.29227,Zn=-.90649,Wn=1.97294,Jn=Wn*Zn,Qn=1.78277*Wn,Gn=1.78277*Vn- -.14861*Zn;function Kn(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof te)return new te(t.h,t.s,t.l,t.opacity);t instanceof vn||(t=pn(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Gn*r+Jn*n-Qn*e)/(Gn+Jn-Qn),a=r-i,f=(Wn*(e-i)-Vn*a)/Zn,o=Math.sqrt(f*f+a*a)/(Wn*i*(1-i)),c=o?Math.atan2(f,a)*kn-120:NaN;return new te(c<0?c+360:c,o,i,t.opacity)}(t):new te(t,n,e,null==r?1:r)}function te(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function ne(t,n,e,r,i){var a=t*t,f=a*t;return((1-3*t+3*a-f)*n+(4-6*a+3*f)*e+(1+3*t+3*a-3*f)*r+f*i)/6}Wt(te,Kn,Jt(Qt,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new te(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new te(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*An,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new vn(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(Vn*r+Zn*i)),255*(n+e*(Wn*r)),this.opacity)}}));var ee=function(t){return function(){return t}};function re(t,n){return function(e){return t+e*n}}function ie(t,n){var e=n-t;return e?re(t,e>180||e<-180?e-360*Math.round(e/360):e):ee(isNaN(t)?n:t)}function ae(t){return 1==(t=+t)?fe:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ee(isNaN(n)?e:n)}}function fe(t,n){var e=n-t;return e?re(t,e):ee(isNaN(t)?n:t)}var oe=function t(n){var e=ae(n);function r(t,n){var r=e((t=yn(t)).r,(n=yn(n)).r),i=e(t.g,n.g),a=e(t.b,n.b),f=fe(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=a(n),t.opacity=f(n),t+""}}return r.gamma=t,r}(1);function ce(t){return function(n){var e,r,i=n.length,a=new Array(i),f=new Array(i),o=new Array(i);for(e=0;e<i;++e)r=yn(n[e]),a[e]=r.r||0,f[e]=r.g||0,o[e]=r.b||0;return a=t(a),f=t(f),o=t(o),r.opacity=1,function(t){return r.r=a(t),r.g=f(t),r.b=o(t),r+""}}}var ue=ce(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],a=t[r+1],f=r>0?t[r-1]:2*i-a,o=r<n-1?t[r+2]:2*a-i;return ne((e-r/n)*n,f,i,a,o)}}),se=(ce(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],a=t[r%n],f=t[(r+1)%n],o=t[(r+2)%n];return ne((e-r/n)*n,i,a,f,o)}}),function(t,n){return n-=t=+t,function(e){return t+n*e}}),he=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,le=new RegExp(he.source,"g");var de,_e,be,pe,ye=function(t,n){var e,r,i,a=he.lastIndex=le.lastIndex=0,f=-1,o=[],c=[];for(t+="",n+="";(e=he.exec(t))&&(r=le.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),o[f]?o[f]+=i:o[++f]=i),(e=e[0])===(r=r[0])?o[f]?o[f]+=r:o[++f]=r:(o[++f]=null,c.push({i:f,x:se(e,r)})),a=le.lastIndex;return a<n.length&&(i=n.slice(a),o[f]?o[f]+=i:o[++f]=i),o.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)o[(e=c[r]).i]=e.x(t);return o.join("")})},ve=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?ee(n):("number"===r?se:"string"===r?(e=dn(n))?(n=e,oe):ye:n instanceof dn?oe:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),f=new Array(r);for(e=0;e<i;++e)a[e]=ve(t[e],n[e]);for(;e<r;++e)f[e]=n[e];return function(t){for(e=0;e<i;++e)f[e]=a[e](t);return f}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=ve(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:se)(t,n)},ge=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},me=180/Math.PI,xe={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},we=function(t,n,e,r,i,a){var f,o,c;return(f=Math.sqrt(t*t+n*n))&&(t/=f,n/=f),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(o=Math.sqrt(e*e+r*r))&&(e/=o,r/=o,c/=o),t*r<n*e&&(t=-t,n=-n,c=-c,f=-f),{translateX:i,translateY:a,rotate:Math.atan2(n,t)*me,skewX:Math.atan(c)*me,scaleX:f,scaleY:o}};function Me(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(a,f){var o=[],c=[];return a=t(a),f=t(f),function(t,r,i,a,f,o){if(t!==i||r!==a){var c=f.push("translate(",null,n,null,e);o.push({i:c-4,x:se(t,i)},{i:c-2,x:se(r,a)})}else(i||a)&&f.push("translate("+i+n+a+e)}(a.translateX,a.translateY,f.translateX,f.translateY,o,c),function(t,n,e,a){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),a.push({i:e.push(i(e)+"rotate(",null,r)-2,x:se(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(a.rotate,f.rotate,o,c),function(t,n,e,a){t!==n?a.push({i:e.push(i(e)+"skewX(",null,r)-2,x:se(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(a.skewX,f.skewX,o,c),function(t,n,e,r,a,f){if(t!==e||n!==r){var o=a.push(i(a)+"scale(",null,",",null,")");f.push({i:o-4,x:se(t,e)},{i:o-2,x:se(n,r)})}else 1===e&&1===r||a.push(i(a)+"scale("+e+","+r+")")}(a.scaleX,a.scaleY,f.scaleX,f.scaleY,o,c),a=f=null,function(t){for(var n,e=-1,r=c.length;++e<r;)o[(n=c[e]).i]=n.x(t);return o.join("")}}}var Ne=Me(function(t){return"none"===t?xe:(de||(de=document.createElement("DIV"),_e=document.documentElement,be=document.defaultView),de.style.transform=t,t=be.getComputedStyle(_e.appendChild(de),null).getPropertyValue("transform"),_e.removeChild(de),t=t.slice(7,-1).split(","),we(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Te=Me(function(t){return null==t?xe:(pe||(pe=document.createElementNS("http://www.w3.org/2000/svg","g")),pe.setAttribute("transform",t),(t=pe.transform.baseVal.consolidate())?(t=t.matrix,we(t.a,t.b,t.c,t.d,t.e,t.f)):xe)},", ",")",")");Math.SQRT2;function Ce(t){return function(n,e){var r=t((n=Nn(n)).h,(e=Nn(e)).h),i=fe(n.s,e.s),a=fe(n.l,e.l),f=fe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=a(t),n.opacity=f(t),n+""}}}Ce(ie),Ce(fe);function Ae(t){return function(n,e){var r=t((n=$n(n)).h,(e=$n(e)).h),i=fe(n.c,e.c),a=fe(n.l,e.l),f=fe(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=a(t),n.opacity=f(t),n+""}}}Ae(ie),Ae(fe);function ke(t){return function n(e){function r(n,r){var i=t((n=Kn(n)).h,(r=Kn(r)).h),a=fe(n.s,r.s),f=fe(n.l,r.l),o=fe(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=a(t),n.l=f(Math.pow(t,e)),n.opacity=o(t),n+""}}return e=+e,r.gamma=n,r}(1)}ke(ie);var Se=ke(fe);var Ee,Ue,Le=0,Pe=0,Re=0,De=1e3,je=0,Fe=0,He=0,Oe="object"==typeof performance&&performance.now?performance:Date,Ye="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qe(){return Fe||(Ye(Ie),Fe=Oe.now()+He)}function Ie(){Fe=0}function ze(){this._call=this._time=this._next=null}function $e(t,n,e){var r=new ze;return r.restart(t,n,e),r}function Be(){Fe=(je=Oe.now())+He,Le=Pe=0;try{!function(){qe(),++Le;for(var t,n=Ee;n;)(t=Fe-n._time)>=0&&n._call.call(null,t),n=n._next;--Le}()}finally{Le=0,function(){var t,n,e=Ee,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:Ee=n);Ue=t,Ve(r)}(),Fe=0}}function Xe(){var t=Oe.now(),n=t-je;n>De&&(He-=n,je=t)}function Ve(t){Le||(Pe&&(Pe=clearTimeout(Pe)),t-Fe>24?(t<1/0&&(Pe=setTimeout(Be,t-Oe.now()-He)),Re&&(Re=clearInterval(Re))):(Re||(je=Oe.now(),Re=setInterval(Xe,De)),Le=1,Ye(Be)))}ze.prototype=$e.prototype={constructor:ze,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?qe():+e)+(null==n?0:+n),this._next||Ue===this||(Ue?Ue._next=this:Ee=this,Ue=this),this._call=t,this._time=e,Ve()},stop:function(){this._call&&(this._call=null,this._time=1/0,Ve())}};var Ze=function(t,n,e){var r=new ze;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},We=F("start","end","cancel","interrupt"),Je=[],Qe=0,Ge=1,Ke=2,tr=3,nr=4,er=5,rr=6,ir=function(t,n,e,r,i,a){var f=t.__transition;if(f){if(e in f)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function a(c){var u,s,h,l;if(e.state!==Ge)return o();for(u in i)if((l=i[u]).name===e.name){if(l.state===tr)return Ze(a);l.state===nr?(l.state=rr,l.timer.stop(),l.on.call("interrupt",t,t.__data__,l.index,l.group),delete i[u]):+u<n&&(l.state=rr,l.timer.stop(),l.on.call("cancel",t,t.__data__,l.index,l.group),delete i[u])}if(Ze(function(){e.state===tr&&(e.state=nr,e.timer.restart(f,e.delay,e.time),f(c))}),e.state=Ke,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Ke){for(e.state=tr,r=new Array(h=e.tween.length),u=0,s=-1;u<h;++u)(l=e.tween[u].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=l);r.length=s+1}}function f(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(o),e.state=er,1),a=-1,f=r.length;++a<f;)r[a].call(t,i);e.state===er&&(e.on.call("end",t,t.__data__,e.index,e.group),o())}function o(){for(var r in e.state=rr,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=$e(function(t){e.state=Ge,e.timer.restart(a,e.delay,e.time),e.delay<=t&&a(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:We,tween:Je,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:Qe})};function ar(t,n){var e=or(t,n);if(e.state>Qe)throw new Error("too late; already scheduled");return e}function fr(t,n){var e=or(t,n);if(e.state>tr)throw new Error("too late; already running");return e}function or(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var cr=function(t,n){var e,r,i,a=t.__transition,f=!0;if(a){for(i in n=null==n?null:n+"",a)(e=a[i]).name===n?(r=e.state>Ke&&e.state<er,e.state=rr,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete a[i]):f=!1;f&&delete t.__transition}};function ur(t,n){var e,r;return function(){var i=fr(this,t),a=i.tween;if(a!==e)for(var f=0,o=(r=e=a).length;f<o;++f)if(r[f].name===n){(r=r.slice()).splice(f,1);break}i.tween=r}}function sr(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var a=fr(this,t),f=a.tween;if(f!==r){i=(r=f).slice();for(var o={name:n,value:e},c=0,u=i.length;c<u;++c)if(i[c].name===n){i[c]=o;break}c===u&&i.push(o)}a.tween=i}}function hr(t,n,e){var r=t._id;return t.each(function(){var t=fr(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return or(t,r).value[n]}}var lr=function(t,n){var e;return("number"==typeof n?se:n instanceof dn?oe:(e=dn(n))?(n=e,oe):ye)(t,n)};function dr(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}function _r(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i}function br(t,n){return function(){ar(this,t).delay=+n.apply(this,arguments)}}function pr(t,n){return n=+n,function(){ar(this,t).delay=n}}function yr(t,n){return function(){fr(this,t).duration=+n.apply(this,arguments)}}function vr(t,n){return n=+n,function(){fr(this,t).duration=n}}function gr(t,n){if("function"!=typeof n)throw new Error;return function(){fr(this,t).ease=n}}function mr(t,n,e){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?ar:fr;return function(){var f=a(this,t),o=f.on;o!==r&&(i=(r=o).copy()).on(n,e),f.on=i}}var xr=$t.prototype.constructor;function wr(t){return function(){this.style.removeProperty(t)}}function Mr(t,n,e){var r,i;function a(){var a=n.apply(this,arguments);return a!==i&&(r=(i=a)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,a,e)),r}return a._value=n,a}var Nr=0;function Tr(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Cr(){return++Nr}var Ar=$t.prototype;Tr.prototype=function(t){return $t().transition(t)}.prototype={constructor:Tr,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=z(t));for(var r=this._groups,i=r.length,a=new Array(i),f=0;f<i;++f)for(var o,c,u=r[f],s=u.length,h=a[f]=new Array(s),l=0;l<s;++l)(o=u[l])&&(c=t.call(o,o.__data__,l,u))&&("__data__"in o&&(c.__data__=o.__data__),h[l]=c,ir(h[l],n,e,l,h,or(o,e)));return new Tr(a,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=B(t));for(var r=this._groups,i=r.length,a=[],f=[],o=0;o<i;++o)for(var c,u=r[o],s=u.length,h=0;h<s;++h)if(c=u[h]){for(var l,d=t.call(c,c.__data__,h,u),_=or(c,e),b=0,p=d.length;b<p;++b)(l=d[b])&&ir(l,n,e,b,d,_);a.push(d),f.push(c)}return new Tr(a,f,n,e)},filter:function(t){"function"!=typeof t&&(t=X(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var a,f=n[i],o=f.length,c=r[i]=[],u=0;u<o;++u)(a=f[u])&&t.call(a,a.__data__,u,f)&&c.push(a);return new Tr(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,a=Math.min(r,i),f=new Array(r),o=0;o<a;++o)for(var c,u=n[o],s=e[o],h=u.length,l=f[o]=new Array(h),d=0;d<h;++d)(c=u[d]||s[d])&&(l[d]=c);for(;o<r;++o)f[o]=n[o];return new Tr(f,this._parents,this._name,this._id)},selection:function(){return new xr(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Cr(),r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)if(f=o[u]){var s=or(f,n);ir(f,t,e,u,o,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Tr(r,this._parents,t,e)},call:Ar.call,nodes:Ar.nodes,node:Ar.node,size:Ar.size,empty:Ar.empty,each:Ar.each,on:function(t,n){var e=this._id;return arguments.length<2?or(this.node(),e).on.on(t):this.each(mr(e,t,n))},attr:function(t,n){var e=Y(t),r="transform"===e?Te:lr;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttributeNS(t.space,t.local))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,a;return function(){var f,o,c=e(this);if(null!=c)return(f=this.getAttribute(t))===(o=c+"")?null:f===r&&o===i?a:(i=o,a=n(r=f,c));this.removeAttribute(t)}})(e,r,hr(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttributeNS(t.space,t.local);return f===a?null:f===r?i:i=n(r=f,e)}}:function(t,n,e){var r,i,a=e+"";return function(){var f=this.getAttribute(t);return f===a?null:f===r?i:i=n(r=f,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Y(t);return this.tween(e,(r.local?dr:_r)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ne:lr;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var a=ut(this,t),f=(this.style.removeProperty(t),ut(this,t));return a===f?null:a===e&&f===r?i:i=n(e=a,r=f)}}(t,r)).on("end.style."+t,wr(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,a;return function(){var f=ut(this,t),o=e(this),c=o+"";return null==o&&(this.style.removeProperty(t),c=o=ut(this,t)),f===c?null:f===r&&c===i?a:(i=c,a=n(r=f,o))}}(t,r,hr(this,"style."+t,n))).each(function(t,n){var e,r,i,a,f="style."+n,o="end."+f;return function(){var c=fr(this,t),u=c.on,s=null==c.value[f]?a||(a=wr(n)):void 0;u===e&&i===s||(r=(e=u).copy()).on(o,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,a=e+"";return function(){var f=ut(this,t);return f===a?null:f===r?i:i=n(r=f,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Mr(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(hr(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=or(this.node(),e).tween,a=0,f=i.length;a<f;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==n?ur:sr)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?br:pr)(n,t)):or(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?yr:vr)(n,t)):or(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(gr(n,t)):or(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(a,f){var o={value:f},c={value:function(){0==--i&&a()}};e.each(function(){var e=fr(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(o),n._.interrupt.push(o),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var kr=2*Math.PI,Sr=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=kr);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*kr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=kr);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*kr)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=kr);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*kr)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Er(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Sr.time=qe(),Sr;return e}$t.prototype.interrupt=function(t){return this.each(function(){cr(this,t)})},$t.prototype.transition=function(t){var n,e;t instanceof Tr?(n=t._id,t=t._name):(n=Cr(),(e=Sr).time=qe(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var f,o=r[a],c=o.length,u=0;u<c;++u)(f=o[u])&&ir(f,t,n,u,o,e||Er(f,n));return new Tr(r,this._parents,t,n)};["e","w"].map(Ur),["n","s"].map(Ur),["n","e","s","w","nw","ne","se","sw"].map(Ur);function Ur(t){return{type:t}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var Lr=Math.PI,Pr=2*Lr,Rr=Pr-1e-6;function Dr(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function jr(){return new Dr}Dr.prototype=jr.prototype={constructor:Dr,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,a){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var a=this._x1,f=this._y1,o=e-t,c=r-n,u=a-t,s=f-n,h=u*u+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(s*o-c*u)>1e-6&&i){var l=e-a,d=r-f,_=o*o+c*c,b=l*l+d*d,p=Math.sqrt(_),y=Math.sqrt(h),v=i*Math.tan((Lr-Math.acos((_+h-b)/(2*p*y)))/2),g=v/y,m=v/p;Math.abs(g-1)>1e-6&&(this._+="L"+(t+g*u)+","+(n+g*s)),this._+="A"+i+","+i+",0,0,"+ +(s*l>u*d)+","+(this._x1=t+m*o)+","+(this._y1=n+m*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,a){t=+t,n=+n,a=!!a;var f=(e=+e)*Math.cos(r),o=e*Math.sin(r),c=t+f,u=n+o,s=1^a,h=a?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+u:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-u)>1e-6)&&(this._+="L"+c+","+u),e&&(h<0&&(h=h%Pr+Pr),h>Rr?this._+="A"+e+","+e+",0,1,"+s+","+(t-f)+","+(n-o)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=u):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=Lr)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};function Fr(){}function Hr(t,n){var e=new Fr;if(t instanceof Fr)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(null==n)for(;++i<a;)e.set(i,t[i]);else for(;++i<a;)e.set(n(r=t[i],i,t),r)}else if(t)for(var f in t)e.set(f,t[f]);return e}Fr.prototype=Hr.prototype={constructor:Fr,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var Or=Hr;function Yr(){}var qr=Or.prototype;function Ir(t,n){var e=new Yr;if(t instanceof Yr)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}Yr.prototype=Ir.prototype={constructor:Yr,has:qr.has,add:function(t){return this["$"+(t+="")]=t,this},remove:qr.remove,clear:qr.clear,values:qr.keys,size:qr.size,empty:qr.empty,each:qr.each};Array.prototype.slice;var zr={},$r={},Br=34,Xr=10,Vr=13;function Zr(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function Wr(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function Jr(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Qr(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),a=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Jr(-n,6):n>9999?"+"+Jr(n,6):Jr(n,4))+"-"+Jr(t.getUTCMonth()+1,2)+"-"+Jr(t.getUTCDate(),2)+(a?"T"+Jr(e,2)+":"+Jr(r,2)+":"+Jr(i,2)+"."+Jr(a,3)+"Z":i?"T"+Jr(e,2)+":"+Jr(r,2)+":"+Jr(i,2)+"Z":r||e?"T"+Jr(e,2)+":"+Jr(r,2)+"Z":"")}var Gr=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],a=t.length,f=0,o=0,c=a<=0,u=!1;function s(){if(c)return $r;if(u)return u=!1,zr;var n,r,i=f;if(t.charCodeAt(i)===Br){for(;f++<a&&t.charCodeAt(f)!==Br||t.charCodeAt(++f)===Br;);return(n=f)>=a?c=!0:(r=t.charCodeAt(f++))===Xr?u=!0:r===Vr&&(u=!0,t.charCodeAt(f)===Xr&&++f),t.slice(i+1,n-1).replace(/""/g,'"')}for(;f<a;){if((r=t.charCodeAt(n=f++))===Xr)u=!0;else if(r===Vr)u=!0,t.charCodeAt(f)===Xr&&++f;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,a)}for(t.charCodeAt(a-1)===Xr&&--a,t.charCodeAt(a-1)===Vr&&--a;(r=s())!==$r;){for(var h=[];r!==zr&&r!==$r;)h.push(r),r=s();n&&null==(h=n(h,o++))||i.push(h)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return f(n[t])}).join(t)})}function a(n){return n.map(f).join(t)}function f(t){return null==t?"":t instanceof Date?Qr(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,a=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Zr(t);return function(r,i){return n(e(r),i,t)}}(t,n):Zr(t)});return a.columns=i||[],a},parseRows:r,format:function(n,e){return null==e&&(e=Wr(n)),[e.map(f).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Wr(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(a).join("\n")}}},Kr=Gr(","),ti=Kr.parse,ni=(Kr.parseRows,Kr.format,Kr.formatBody,Kr.formatRows,Gr("\t")),ei=ni.parse;ni.parseRows,ni.format,ni.formatBody,ni.formatRows;function ri(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ii=function(t,n){return fetch(t,n).then(ri)};function ai(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),ii(n,e).then(function(n){return t(n,r)})}}ai(ti),ai(ei);function fi(t){return function(n,e){return ii(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}fi("application/xml"),fi("text/html"),fi("image/svg+xml");function oi(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,a,f,o,c,u,s,h,l,d=t._root,_={data:r},b=t._x0,p=t._y0,y=t._x1,v=t._y1;if(!d)return t._root=_,t;for(;d.length;)if((u=n>=(a=(b+y)/2))?b=a:y=a,(s=e>=(f=(p+v)/2))?p=f:v=f,i=d,!(d=d[h=s<<1|u]))return i[h]=_,t;if(o=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===o&&e===c)return _.next=d,i?i[h]=_:t._root=_,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(u=n>=(a=(b+y)/2))?b=a:y=a,(s=e>=(f=(p+v)/2))?p=f:v=f}while((h=s<<1|u)==(l=(c>=f)<<1|o>=a));return i[l]=d,i[h]=_,t}var ci=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function ui(t){return t[0]}function si(t){return t[1]}function hi(t,n,e){var r=new li(null==n?ui:n,null==e?si:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function li(t,n,e,r,i,a){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=a,this._root=void 0}function di(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var _i=hi.prototype=li.prototype;_i.copy=function(){var t,n,e=new li(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=di(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=di(n));return e},_i.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return oi(this.cover(n,e),n,e,t)},_i.addAll=function(t){var n,e,r,i,a=t.length,f=new Array(a),o=new Array(a),c=1/0,u=1/0,s=-1/0,h=-1/0;for(e=0;e<a;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(f[e]=r,o[e]=i,r<c&&(c=r),r>s&&(s=r),i<u&&(u=i),i>h&&(h=i));if(c>s||u>h)return this;for(this.cover(c,u).cover(s,h),e=0;e<a;++e)oi(this,f[e],o[e],t[e]);return this},_i.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,a=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,a=(r=Math.floor(n))+1;else{for(var f,o,c=i-e,u=this._root;e>t||t>=i||r>n||n>=a;)switch(o=(n<r)<<1|t<e,(f=new Array(4))[o]=u,u=f,c*=2,o){case 0:i=e+c,a=r+c;break;case 1:e=i-c,a=r+c;break;case 2:i=e+c,r=a-c;break;case 3:e=i-c,r=a-c}this._root&&this._root.length&&(this._root=u)}return this._x0=e,this._y0=r,this._x1=i,this._y1=a,this},_i.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},_i.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},_i.find=function(t,n,e){var r,i,a,f,o,c,u,s=this._x0,h=this._y0,l=this._x1,d=this._y1,_=[],b=this._root;for(b&&_.push(new ci(b,s,h,l,d)),null==e?e=1/0:(s=t-e,h=n-e,l=t+e,d=n+e,e*=e);c=_.pop();)if(!(!(b=c.node)||(i=c.x0)>l||(a=c.y0)>d||(f=c.x1)<s||(o=c.y1)<h))if(b.length){var p=(i+f)/2,y=(a+o)/2;_.push(new ci(b[3],p,y,f,o),new ci(b[2],i,y,p,o),new ci(b[1],p,a,f,y),new ci(b[0],i,a,p,y)),(u=(n>=y)<<1|t>=p)&&(c=_[_.length-1],_[_.length-1]=_[_.length-1-u],_[_.length-1-u]=c)}else{var v=t-+this._x.call(null,b.data),g=n-+this._y.call(null,b.data),m=v*v+g*g;if(m<e){var x=Math.sqrt(e=m);s=t-x,h=n-x,l=t+x,d=n+x,r=b.data}}return r},_i.remove=function(t){if(isNaN(a=+this._x.call(null,t))||isNaN(f=+this._y.call(null,t)))return this;var n,e,r,i,a,f,o,c,u,s,h,l,d=this._root,_=this._x0,b=this._y0,p=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((u=a>=(o=(_+p)/2))?_=o:p=o,(s=f>=(c=(b+y)/2))?b=c:y=c,n=d,!(d=d[h=s<<1|u]))return this;if(!d.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,l=h)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[l]=d:this._root=d),this):(this._root=i,this)},_i.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},_i.root=function(){return this._root},_i.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},_i.visit=function(t){var n,e,r,i,a,f,o=[],c=this._root;for(c&&o.push(new ci(c,this._x0,this._y0,this._x1,this._y1));n=o.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,a=n.x1,f=n.y1)&&c.length){var u=(r+a)/2,s=(i+f)/2;(e=c[3])&&o.push(new ci(e,u,s,a,f)),(e=c[2])&&o.push(new ci(e,r,s,u,f)),(e=c[1])&&o.push(new ci(e,u,i,a,s)),(e=c[0])&&o.push(new ci(e,r,i,u,s))}return this},_i.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new ci(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var a,f=n.x0,o=n.y0,c=n.x1,u=n.y1,s=(f+c)/2,h=(o+u)/2;(a=i[0])&&e.push(new ci(a,f,o,s,h)),(a=i[1])&&e.push(new ci(a,s,o,c,h)),(a=i[2])&&e.push(new ci(a,f,h,s,u)),(a=i[3])&&e.push(new ci(a,s,h,c,u))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},_i.x=function(t){return arguments.length?(this._x=t,this):this._x},_i.y=function(t){return arguments.length?(this._y=t,this):this._y};Math.PI,Math.sqrt(5);var bi=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},pi=function(t){return(t=bi(Math.abs(t)))?t[1]:NaN},yi=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function vi(t){return new gi(t)}function gi(t){if(!(n=yi.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}vi.prototype=gi.prototype,gi.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var mi,xi,wi,Mi,Ni=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},Ti=function(t,n){var e=bi(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Ci={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Ti(100*t,n)},r:Ti,s:function(t,n){var e=bi(t,n);if(!e)return t+"";var r=e[0],i=e[1],a=i-(mi=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,f=r.length;return a===f?r:a>f?r+new Array(a-f+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+bi(t,Math.max(0,n+a-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Ai=function(t){return t},ki=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];xi=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,a=[],f=0,o=n[0],c=0;i>0&&o>0&&(c+o+1>r&&(o=Math.max(1,r-c)),a.push(t.substring(i-=o,i+o)),!((c+=o+1)>r));)o=n[f=(f+1)%n.length];return a.reverse().join(e)}):Ai,i=t.currency,a=t.decimal,f=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Ai,o=t.percent||"%";function c(t){var n=(t=vi(t)).fill,e=t.align,c=t.sign,u=t.symbol,s=t.zero,h=t.width,l=t.comma,d=t.precision,_=t.trim,b=t.type;"n"===b?(l=!0,b="g"):Ci[b]||(null==d&&(d=12),_=!0,b="g"),(s||"0"===n&&"="===e)&&(s=!0,n="0",e="=");var p="$"===u?i[0]:"#"===u&&/[boxX]/.test(b)?"0"+b.toLowerCase():"",y="$"===u?i[1]:/[%p]/.test(b)?o:"",v=Ci[b],g=/[defgprs%]/.test(b);function m(t){var i,o,u,m=p,x=y;if("c"===b)x=v(t)+x,t="";else{var w=(t=+t)<0;if(t=v(Math.abs(t),d),_&&(t=Ni(t)),w&&0==+t&&(w=!1),m=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+m,x=("s"===b?ki[8+mi/3]:"")+x+(w&&"("===c?")":""),g)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){x=(46===u?a+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}l&&!s&&(t=r(t,1/0));var M=m.length+t.length+x.length,N=M<h?new Array(h-M+1).join(n):"";switch(l&&s&&(t=r(N+t,N.length?h-x.length:1/0),N=""),e){case"<":t=m+t+x+N;break;case"=":t=m+N+t+x;break;case"^":t=N.slice(0,M=N.length>>1)+m+t+x+N.slice(M);break;default:t=N+m+t+x}return f(t)}return d=null==d?6:/[gprs]/.test(b)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=vi(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(pi(n)/3))),i=Math.pow(10,-r),a=ki[8+r/3];return function(t){return e(i*t)+a}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),wi=xi.format,Mi=xi.formatPrefix;var Si=function(){return new Ei};function Ei(){this.reset()}Ei.prototype={constructor:Ei,reset:function(){this.s=this.t=0},add:function(t){Li(Ui,t,this.t),Li(this,Ui.s,this.s),this.s?this.t+=Ui.t:this.s=Ui.t},valueOf:function(){return this.s}};var Ui=new Ei;function Li(t,n,e){var r=t.s=n+e,i=r-n,a=r-i;t.t=n-a+(e-i)}var Pi=1e-6,Ri=1e-12,Di=Math.PI,ji=Di/2,Fi=Di/4,Hi=2*Di,Oi=Di/180,Yi=Math.abs,qi=Math.atan,Ii=Math.atan2,zi=Math.cos,$i=(Math.ceil,Math.exp),Bi=(Math.floor,Math.log),Xi=(Math.pow,Math.sin),Vi=Math.sign||function(t){return t>0?1:t<0?-1:0},Zi=Math.sqrt,Wi=Math.tan;function Ji(t){return t>1?0:t<-1?Di:Math.acos(t)}function Qi(t){return t>1?ji:t<-1?-ji:Math.asin(t)}function Gi(){}Si(),Si();function Ki(t){var n=t[0],e=t[1],r=zi(e);return[r*zi(n),r*Xi(n),Xi(e)]}function ta(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function na(t){var n=Zi(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}Si();function ea(t,n){return[Yi(t)>Di?t+Math.round(-t/Hi)*Hi:t,n]}ea.invert=ea;var ra=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:Gi,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},ia=function(t,n){return Yi(t[0]-n[0])<Pi&&Yi(t[1]-n[1])<Pi};function aa(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var fa=function(t,n,e,r,i){var a,f,o=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],f=t[n];if(ia(r,f)){for(i.lineStart(),a=0;a<n;++a)i.point((r=t[a])[0],r[1]);i.lineEnd()}else o.push(e=new aa(r,t,null,!0)),c.push(e.o=new aa(r,null,e,!1)),o.push(e=new aa(f,t,null,!1)),c.push(e.o=new aa(f,null,e,!0))}}),o.length){for(c.sort(n),oa(o),oa(c),a=0,f=c.length;a<f;++a)c[a].e=e=!e;for(var u,s,h=o[0];;){for(var l=h,d=!0;l.v;)if((l=l.n)===h)return;u=l.z,i.lineStart();do{if(l.v=l.o.v=!0,l.e){if(d)for(a=0,f=u.length;a<f;++a)i.point((s=u[a])[0],s[1]);else r(l.x,l.n.x,1,i);l=l.n}else{if(d)for(u=l.p.z,a=u.length-1;a>=0;--a)i.point((s=u[a])[0],s[1]);else r(l.x,l.p.x,-1,i);l=l.p}u=(l=l.o).z,d=!d}while(!l.v);i.lineEnd()}}};function oa(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var ca=Si();function ua(t){return Yi(t[0])<=Di?t[0]:Vi(t[0])*((Yi(t[0])+Di)%Hi-Di)}var sa=function(t,n){var e=ua(n),r=n[1],i=Xi(r),a=[Xi(e),-zi(e),0],f=0,o=0;ca.reset(),1===i?r=ji+Pi:-1===i&&(r=-ji-Pi);for(var c=0,u=t.length;c<u;++c)if(h=(s=t[c]).length)for(var s,h,l=s[h-1],d=ua(l),_=l[1]/2+Fi,b=Xi(_),p=zi(_),y=0;y<h;++y,d=g,b=x,p=w,l=v){var v=s[y],g=ua(v),m=v[1]/2+Fi,x=Xi(m),w=zi(m),M=g-d,N=M>=0?1:-1,T=N*M,C=T>Di,A=b*x;if(ca.add(Ii(A*N*Xi(T),p*w+A*zi(T))),f+=C?M+N*Hi:M,C^d>=e^g>=e){var k=ta(Ki(l),Ki(v));na(k);var S=ta(a,k);na(S);var E=(C^M>=0?-1:1)*Qi(S[2]);(r>E||r===E&&(k[0]||k[1]))&&(o+=C^M>=0?1:-1)}}return(f<-Pi||f<Pi&&ca<-Pi)^1&o},ha=function(t,n,e,r){return function(i){var a,f,o,c=n(i),u=ra(),s=n(u),h=!1,l={point:d,lineStart:b,lineEnd:p,polygonStart:function(){l.point=y,l.lineStart=v,l.lineEnd=m,f=[],a=[]},polygonEnd:function(){l.point=d,l.lineStart=b,l.lineEnd=p,f=g(f);var t=sa(a,r);f.length?(h||(i.polygonStart(),h=!0),fa(f,da,t,e,i)):t&&(h||(i.polygonStart(),h=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),h&&(i.polygonEnd(),h=!1),f=a=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function _(t,n){c.point(t,n)}function b(){l.point=_,c.lineStart()}function p(){l.point=d,c.lineEnd()}function y(t,n){o.push([t,n]),s.point(t,n)}function v(){s.lineStart(),o=[]}function m(){y(o[0][0],o[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),l=u.result(),d=l.length;if(o.pop(),a.push(o),o=null,d)if(1&c){if((n=(e=l[0]).length-1)>0){for(h||(i.polygonStart(),h=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&l.push(l.pop().concat(l.shift())),f.push(l.filter(la))}return l}};function la(t){return t.length>1}function da(t,n){return((t=t.x)[0]<0?t[1]-ji-Pi:ji-t[1])-((n=n.x)[0]<0?n[1]-ji-Pi:ji-n[1])}ha(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,f){var o=a>0?Di:-Di,c=Yi(a-e);Yi(c-Di)<Pi?(t.point(e,r=(r+f)/2>0?ji:-ji),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),t.point(a,r),n=0):i!==o&&c>=Di&&(Yi(e-i)<Pi&&(e-=i*Pi),Yi(a-o)<Pi&&(a-=o*Pi),r=function(t,n,e,r){var i,a,f=Xi(t-e);return Yi(f)>Pi?qi((Xi(n)*(a=zi(r))*Xi(e)-Xi(r)*(i=zi(n))*Xi(t))/(i*a*f)):(n+r)/2}(e,r,a,f),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(o,r),n=0),t.point(e=a,r=f),i=o},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*ji,r.point(-Di,i),r.point(0,i),r.point(Di,i),r.point(Di,0),r.point(Di,-i),r.point(0,-i),r.point(-Di,-i),r.point(-Di,0),r.point(-Di,i);else if(Yi(t[0]-n[0])>Pi){var a=t[0]<n[0]?Di:-Di;i=e*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(n[0],n[1])},[-Di,-ji]);Si();Si(),Si();function _a(t){this._context=t}_a.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Hi)}},result:Gi};Si();function ba(){this._string=[]}function pa(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}ba.prototype={_radius:4.5,_circle:pa(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=pa(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function ya(t){return function(n){var e=new va;for(var r in t)e[r]=t[r];return e.stream=n,e}}function va(){}va.prototype={constructor:va,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};zi(30*Oi);ya({point:function(t,n){this.stream.point(t*Oi,n*Oi)}});function ga(t){return function(n,e){var r=zi(n),i=zi(e),a=t(r*i);return[a*i*Xi(n),a*Xi(e)]}}function ma(t){return function(n,e){var r=Zi(n*n+e*e),i=t(r),a=Xi(i),f=zi(i);return[Ii(n*a,r*f),Qi(r&&e*a/r)]}}var xa=ga(function(t){return Zi(2/(1+t))});xa.invert=ma(function(t){return 2*Qi(t/2)});var wa=ga(function(t){return(t=Ji(t))&&t/Xi(t)});wa.invert=ma(function(t){return t});function Ma(t,n){return[t,Bi(Wi((ji+n)/2))]}Ma.invert=function(t,n){return[t,2*qi($i(n))-ji]};function Na(t,n){return[t,n]}Na.invert=Na;var Ta=1.340264,Ca=-.081106,Aa=893e-6,ka=.003796,Sa=Zi(3)/2;function Ea(t,n){var e=Qi(Sa*Xi(n)),r=e*e,i=r*r*r;return[t*zi(e)/(Sa*(Ta+3*Ca*r+i*(7*Aa+9*ka*r))),e*(Ta+Ca*r+i*(Aa+ka*r))]}Ea.invert=function(t,n){for(var e,r=n,i=r*r,a=i*i*i,f=0;f<12&&(a=(i=(r-=e=(r*(Ta+Ca*i+a*(Aa+ka*i))-n)/(Ta+3*Ca*i+a*(7*Aa+9*ka*i)))*r)*i*i,!(Yi(e)<Ri));++f);return[Sa*t*(Ta+3*Ca*i+a*(7*Aa+9*ka*i))/zi(r),Qi(Xi(r)/Sa)]};function Ua(t,n){var e=zi(n),r=zi(t)*e;return[e*Xi(t)/r,Xi(n)/r]}Ua.invert=ma(qi);function La(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}La.invert=function(t,n){var e,r=n,i=25;do{var a=r*r,f=a*a;r-=e=(r*(1.007226+a*(.015085+f*(.028874*a-.044475-.005916*f)))-n)/(1.007226+a*(.045255+f*(.259866*a-.311325-.005916*11*f)))}while(Yi(e)>Pi&&--i>0);return[t/(.8707+(a=r*r)*(a*(a*a*a*(.003971-.001529*a)-.013791)-.131979)),r]};function Pa(t,n){return[zi(n)*Xi(t),Xi(n)]}Pa.invert=ma(Qi);function Ra(t,n){var e=zi(n),r=1+zi(t)*e;return[e*Xi(t)/r,Xi(n)/r]}Ra.invert=ma(function(t){return 2*qi(t)});function Da(t,n){return[Bi(Wi((ji+n)/2)),-t]}Da.invert=function(t,n){return[-n,2*qi($i(t))-ji]};function ja(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Fa(t,n){var e,r,i,a,f,o=new qa(t),c=+t.value&&(o.value=t.value),u=[o];for(null==n&&(n=Ha);e=u.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(f=i.length))for(e.children=new Array(f),a=f-1;a>=0;--a)u.push(r=e.children[a]=new qa(i[a])),r.parent=e,r.depth=e.depth+1;return o.eachBefore(Ya)}function Ha(t){return t.children}function Oa(t){t.data=t.data.data}function Ya(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function qa(t){this.data=t,this.depth=this.height=0,this.parent=null}qa.prototype=Fa.prototype={constructor:qa,count:function(){return this.eachAfter(ja)},each:function(t){var n,e,r,i,a=this,f=[a];do{for(n=f.reverse(),f=[];a=n.pop();)if(t(a),e=a.children)for(r=0,i=e.length;r<i;++r)f.push(e[r])}while(f.length);return this},eachAfter:function(t){for(var n,e,r,i=this,a=[i],f=[];i=a.pop();)if(f.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)a.push(n[e]);for(;i=f.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return Fa(this).eachBefore(Oa)}};Array.prototype.slice;var Ia=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(r-n)/t.value;++o<c;)(a=f[o]).y0=e,a.y1=i,a.x0=n,a.x1=n+=a.value*u};function za(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}za.prototype=Object.create(qa.prototype);var $a=function(t,n,e,r,i){for(var a,f=t.children,o=-1,c=f.length,u=t.value&&(i-e)/t.value;++o<c;)(a=f[o]).x0=n,a.x1=r,a.y0=e,a.y1=e+=a.value*u},Ba=(1+Math.sqrt(5))/2;function Xa(t,n,e,r,i,a){for(var f,o,c,u,s,h,l,d,_,b,p,y=[],v=n.children,g=0,m=0,x=v.length,w=n.value;g<x;){c=i-e,u=a-r;do{s=v[m++].value}while(!s&&m<x);for(h=l=s,p=s*s*(b=Math.max(u/c,c/u)/(w*t)),_=Math.max(l/p,p/h);m<x;++m){if(s+=o=v[m].value,o<h&&(h=o),o>l&&(l=o),p=s*s*b,(d=Math.max(l/p,p/h))>_){s-=o;break}_=d}y.push(f={value:s,dice:c<u,children:v.slice(g,m)}),f.dice?Ia(f,e,r,i,w?r+=u*s/w:a):$a(f,e,r,w?e+=c*s/w:i,a),w-=s,g=m}return y}(function t(n){function e(t,e,r,i,a){Xa(n,t,e,r,i,a)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e})(Ba),function t(n){function e(t,e,r,i,a){if((f=t._squarify)&&f.ratio===n)for(var f,o,c,u,s,h=-1,l=f.length,d=t.value;++h<l;){for(c=(o=f[h]).children,u=o.value=0,s=c.length;u<s;++u)o.value+=c[u].value;o.dice?Ia(o,e,r,i,r+=(a-r)*o.value/d):$a(o,e,r,e+=(i-e)*o.value/d,a),d-=o.value}else t._squarify=f=Xa(n,t,e,r,i,a),f.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(Ba);var Va=function(){return Math.random()},Za=(function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Va),function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var a;if(null!=r)a=r,r=null;else do{r=2*n()-1,a=2*n()-1,i=r*r+a*a}while(!i||i>1);return t+e*a*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Va)),Wa=(function t(n){function e(){var t=Za.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Va),function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Va));(function t(n){function e(t){var e=Wa.source(n)(t);return function(){return e()/t}}return e.source=t,e})(Va),function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Va);function Ja(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Qa=Array.prototype,Ga=Qa.map,Ka=Qa.slice,tf={name:"implicit"};function nf(){var t,n,e=function t(){var n=Or(),e=[],r=[],i=tf;function a(t){var a=t+"",f=n.get(a);if(!f){if(i!==tf)return i;n.set(a,f=e.push(t))}return r[(f-1)%r.length]}return a.domain=function(t){if(!arguments.length)return e.slice();e=[],n=Or();for(var r,i,f=-1,o=t.length;++f<o;)n.has(i=(r=t[f])+"")||n.set(i,e.push(r));return a},a.range=function(t){return arguments.length?(r=Ka.call(t),a):r.slice()},a.unknown=function(t){return arguments.length?(i=t,a):i},a.copy=function(){return t(e,r).unknown(i)},Ja.apply(a,arguments),a}().unknown(void 0),r=e.domain,i=e.range,a=[0,1],f=!1,o=0,c=0,u=.5;function h(){var e=r().length,h=a[1]<a[0],l=a[h-0],d=a[1-h];t=(d-l)/Math.max(1,e-o+2*c),f&&(t=Math.floor(t)),l+=(d-l-t*(e-o))*u,n=t*(1-o),f&&(l=Math.round(l),n=Math.round(n));var _=s(e).map(function(n){return l+t*n});return i(h?_.reverse():_)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),h()):r()},e.range=function(t){return arguments.length?(a=[+t[0],+t[1]],h()):a.slice()},e.rangeRound=function(t){return a=[+t[0],+t[1]],f=!0,h()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(f=!!t,h()):f},e.padding=function(t){return arguments.length?(o=Math.min(1,c=+t),h()):o},e.paddingInner=function(t){return arguments.length?(o=Math.min(1,t),h()):o},e.paddingOuter=function(t){return arguments.length?(c=+t,h()):c},e.align=function(t){return arguments.length?(u=Math.max(0,Math.min(1,t)),h()):u},e.copy=function(){return nf(r(),a).round(f).paddingInner(o).paddingOuter(c).align(u)},Ja.apply(h(),arguments)}var ef=function(t){return function(){return t}},rf=function(t){return+t},af=[0,1];function ff(t){return t}function of(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:ef(isNaN(n)?NaN:.5)}function cf(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function uf(t,n,e){var r=t[0],i=t[1],a=n[0],f=n[1];return i<r?(r=of(i,r),a=e(f,a)):(r=of(r,i),a=e(a,f)),function(t){return a(r(t))}}function sf(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),a=new Array(r),f=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++f<r;)i[f]=of(t[f],t[f+1]),a[f]=e(n[f],n[f+1]);return function(n){var e=o(t,n,1,r)-1;return a[e](i[e](n))}}function hf(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function lf(){var t,n,e,r,i,a,f=af,o=af,c=ve,u=ff;function s(){return r=Math.min(f.length,o.length)>2?sf:uf,i=a=null,h}function h(n){return isNaN(n=+n)?e:(i||(i=r(f.map(t),o,c)))(t(u(n)))}return h.invert=function(e){return u(n((a||(a=r(o,f.map(t),se)))(e)))},h.domain=function(t){return arguments.length?(f=Ga.call(t,rf),u===ff||(u=cf(f)),s()):f.slice()},h.range=function(t){return arguments.length?(o=Ka.call(t),s()):o.slice()},h.rangeRound=function(t){return o=Ka.call(t),c=ge,s()},h.clamp=function(t){return arguments.length?(u=t?cf(f):ff,h):u!==ff},h.interpolate=function(t){return arguments.length?(c=t,s()):c},h.unknown=function(t){return arguments.length?(e=t,h):e},function(e,r){return t=e,n=r,s()}}function df(t,n){return lf()(t,n)}var _f=function(t,n,e,r){var i,a=p(t,n,e);switch((r=vi(null==r?",f":r)).type){case"s":var f=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(pi(n)/3)))-pi(Math.abs(t)))}(a,f))||(r.precision=i),Mi(r,f);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,pi(n)-pi(t))+1}(a,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-pi(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return wi(r)};function bf(t){var n=t.domain;return t.ticks=function(t){var e=n();return _(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return _f(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),a=0,f=i.length-1,o=i[a],c=i[f];return c<o&&(r=o,o=c,c=r,r=a,a=f,f=r),(r=b(o,c,e))>0?r=b(o=Math.floor(o/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=b(o=Math.ceil(o*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[a]=Math.floor(o/r)*r,i[f]=Math.ceil(c/r)*r,n(i)):r<0&&(i[a]=Math.ceil(o*r)/r,i[f]=Math.floor(c*r)/r,n(i)),t},t}var pf=new Date,yf=new Date;function vf(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,a){var f,o=[];if(e=i.ceil(e),a=null==a?1:Math.floor(a),!(e<r&&a>0))return o;do{o.push(f=new Date(+e)),n(e,a),t(e)}while(f<e&&e<r);return o},i.filter=function(e){return vf(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return pf.setTime(+n),yf.setTime(+r),t(pf),t(yf),Math.floor(e(pf,yf))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var gf=vf(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});gf.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?vf(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):gf:null};gf.range;var mf=6e4,xf=6048e5,wf=vf(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Mf=(wf.range,vf(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*mf)},function(t,n){return(n-t)/mf},function(t){return t.getMinutes()})),Nf=(Mf.range,vf(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*mf)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Tf=(Nf.range,vf(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*mf)/864e5},function(t){return t.getDate()-1})),Cf=Tf;Tf.range;function Af(t){return vf(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*mf)/xf})}var kf=Af(0),Sf=Af(1),Ef=Af(2),Uf=Af(3),Lf=Af(4),Pf=Af(5),Rf=Af(6),Df=(kf.range,Sf.range,Ef.range,Uf.range,Lf.range,Pf.range,Rf.range,vf(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),jf=(Df.range,vf(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));jf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?vf(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Ff=jf,Hf=(jf.range,vf(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*mf)},function(t,n){return(n-t)/mf},function(t){return t.getUTCMinutes()})),Of=(Hf.range,vf(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Yf=(Of.range,vf(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),qf=Yf;Yf.range;function If(t){return vf(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/xf})}var zf=If(0),$f=If(1),Bf=If(2),Xf=If(3),Vf=If(4),Zf=If(5),Wf=If(6),Jf=(zf.range,$f.range,Bf.range,Xf.range,Vf.range,Zf.range,Wf.range,vf(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),Qf=(Jf.range,vf(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Qf.every=function(t){return isFinite(t=Math.floor(t))&&t>0?vf(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Gf=Qf;Qf.range;function Kf(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function to(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function no(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var eo,ro,io,ao={"-":"",_:" ",0:"0"},fo=/^\s*\d+/,oo=/^%/,co=/[\\^$*+?|[\]().{}]/g;function uo(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<e?new Array(e-a+1).join(n)+i:i)}function so(t){return t.replace(co,"\\$&")}function ho(t){return new RegExp("^(?:"+t.map(so).join("|")+")","i")}function lo(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function _o(t,n,e){var r=fo.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function bo(t,n,e){var r=fo.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function po(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function yo(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function vo(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function go(t,n,e){var r=fo.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function mo(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function xo(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function wo(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Mo(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function No(t,n,e){var r=fo.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function To(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Co(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ao(t,n,e){var r=fo.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ko(t,n,e){var r=fo.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function So(t,n,e){var r=fo.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Eo(t,n,e){var r=oo.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Uo(t,n,e){var r=fo.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Lo(t,n,e){var r=fo.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Po(t,n){return uo(t.getDate(),n,2)}function Ro(t,n){return uo(t.getHours(),n,2)}function Do(t,n){return uo(t.getHours()%12||12,n,2)}function jo(t,n){return uo(1+Cf.count(Ff(t),t),n,3)}function Fo(t,n){return uo(t.getMilliseconds(),n,3)}function Ho(t,n){return Fo(t,n)+"000"}function Oo(t,n){return uo(t.getMonth()+1,n,2)}function Yo(t,n){return uo(t.getMinutes(),n,2)}function qo(t,n){return uo(t.getSeconds(),n,2)}function Io(t){var n=t.getDay();return 0===n?7:n}function zo(t,n){return uo(kf.count(Ff(t),t),n,2)}function $o(t,n){var e=t.getDay();return t=e>=4||0===e?Lf(t):Lf.ceil(t),uo(Lf.count(Ff(t),t)+(4===Ff(t).getDay()),n,2)}function Bo(t){return t.getDay()}function Xo(t,n){return uo(Sf.count(Ff(t),t),n,2)}function Vo(t,n){return uo(t.getFullYear()%100,n,2)}function Zo(t,n){return uo(t.getFullYear()%1e4,n,4)}function Wo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+uo(n/60|0,"0",2)+uo(n%60,"0",2)}function Jo(t,n){return uo(t.getUTCDate(),n,2)}function Qo(t,n){return uo(t.getUTCHours(),n,2)}function Go(t,n){return uo(t.getUTCHours()%12||12,n,2)}function Ko(t,n){return uo(1+qf.count(Gf(t),t),n,3)}function tc(t,n){return uo(t.getUTCMilliseconds(),n,3)}function nc(t,n){return tc(t,n)+"000"}function ec(t,n){return uo(t.getUTCMonth()+1,n,2)}function rc(t,n){return uo(t.getUTCMinutes(),n,2)}function ic(t,n){return uo(t.getUTCSeconds(),n,2)}function ac(t){var n=t.getUTCDay();return 0===n?7:n}function fc(t,n){return uo(zf.count(Gf(t),t),n,2)}function oc(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Vf(t):Vf.ceil(t),uo(Vf.count(Gf(t),t)+(4===Gf(t).getUTCDay()),n,2)}function cc(t){return t.getUTCDay()}function uc(t,n){return uo($f.count(Gf(t),t),n,2)}function sc(t,n){return uo(t.getUTCFullYear()%100,n,2)}function hc(t,n){return uo(t.getUTCFullYear()%1e4,n,4)}function lc(){return"+0000"}function dc(){return"%"}function _c(t){return+t}function bc(t){return Math.floor(+t/1e3)}!function(t){eo=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,a=t.days,f=t.shortDays,o=t.months,c=t.shortMonths,u=ho(i),s=lo(i),h=ho(a),l=lo(a),d=ho(f),_=lo(f),b=ho(o),p=lo(o),y=ho(c),v=lo(c),g={a:function(t){return f[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return o[t.getMonth()]},c:null,d:Po,e:Po,f:Ho,H:Ro,I:Do,j:jo,L:Fo,m:Oo,M:Yo,p:function(t){return i[+(t.getHours()>=12)]},Q:_c,s:bc,S:qo,u:Io,U:zo,V:$o,w:Bo,W:Xo,x:null,X:null,y:Vo,Y:Zo,Z:Wo,"%":dc},m={a:function(t){return f[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return o[t.getUTCMonth()]},c:null,d:Jo,e:Jo,f:nc,H:Qo,I:Go,j:Ko,L:tc,m:ec,M:rc,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:_c,s:bc,S:ic,u:ac,U:fc,V:oc,w:cc,W:uc,x:null,X:null,y:sc,Y:hc,Z:lc,"%":dc},x={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=_[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=h.exec(n.slice(e));return r?(t.w=l[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=v[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=b.exec(n.slice(e));return r?(t.m=p[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return N(t,n,e,r)},d:Mo,e:Mo,f:So,H:To,I:To,j:No,L:ko,m:wo,M:Co,p:function(t,n,e){var r=u.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:Uo,s:Lo,S:Ao,u:bo,U:po,V:yo,w:_o,W:vo,x:function(t,n,r){return N(t,e,n,r)},X:function(t,n,e){return N(t,r,n,e)},y:mo,Y:go,Z:xo,"%":Eo};function w(t,n){return function(e){var r,i,a,f=[],o=-1,c=0,u=t.length;for(e instanceof Date||(e=new Date(+e));++o<u;)37===t.charCodeAt(o)&&(f.push(t.slice(c,o)),null!=(i=ao[r=t.charAt(++o)])?r=t.charAt(++o):i="e"===r?" ":"0",(a=n[r])&&(r=a(e,i)),f.push(r),c=o+1);return f.push(t.slice(c,o)),f.join("")}}function M(t,n){return function(e){var r,i,a=no(1900);if(N(a,t,e+="",0)!=e.length)return null;if("Q"in a)return new Date(a.Q);if("p"in a&&(a.H=a.H%12+12*a.p),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=to(no(a.y))).getUTCDay(),r=i>4||0===i?$f.ceil(r):$f(r),r=qf.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=n(no(a.y))).getDay(),r=i>4||0===i?Sf.ceil(r):Sf(r),r=Cf.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?to(no(a.y)).getUTCDay():n(no(a.y)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,to(a)):n(a)}}function N(t,n,e,r){for(var i,a,f=0,o=n.length,c=e.length;f<o;){if(r>=c)return-1;if(37===(i=n.charCodeAt(f++))){if(i=n.charAt(f++),!(a=x[i in ao?n.charAt(f++):i])||(r=a(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return g.x=w(e,g),g.X=w(r,g),g.c=w(n,g),m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),{format:function(t){var n=w(t+="",g);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",Kf);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,to);return n.toString=function(){return t},n}}}(t),eo.format,eo.parse,ro=eo.utcFormat,io=eo.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ro("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||io("%Y-%m-%dT%H:%M:%S.%LZ");var pc=function(t){for(var n=t.length/6|0,e=new Array(n),r=0;r<n;)e[r]="#"+t.slice(6*r,6*++r);return e},yc=(pc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),pc("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),pc("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),pc("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),pc("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),pc("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),pc("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),pc("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),pc("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(t){return ue(t[t.length-1])});yc(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(pc)),yc(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(pc)),yc(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(pc)),yc(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(pc)),yc(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(pc)),yc(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(pc)),yc(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(pc)),yc(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(pc)),yc(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(pc)),yc(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(pc)),yc(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(pc)),yc(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(pc)),yc(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(pc)),yc(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(pc)),yc(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(pc)),yc(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(pc)),yc(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(pc)),yc(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(pc)),yc(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(pc)),yc(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(pc)),yc(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(pc)),yc(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(pc)),yc(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(pc)),yc(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(pc)),yc(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(pc)),yc(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(pc)),yc(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(pc)),Se(Kn(300,.5,0),Kn(-240,.5,1)),Se(Kn(-100,.75,.35),Kn(80,1.5,.8)),Se(Kn(260,.75,.35),Kn(80,1.5,.8)),Kn(),yn(),Math.PI,Math.PI;function vc(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}vc(pc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),vc(pc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),vc(pc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),vc(pc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var gc=1e-12,mc=Math.PI,xc=2*mc;function wc(t){this._context=t}wc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Mc=function(t){return new wc(t)};Tc(Mc);function Nc(t){this._curve=t}function Tc(t){function n(n){return new Nc(t(n))}return n._curve=t,n}Nc.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};Array.prototype.slice;Math.sqrt(1/3);var Cc=Math.sin(mc/10)/Math.sin(7*mc/10),Ac=(Math.sin(xc/10),Math.cos(xc/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function kc(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function Sc(t){this._context=t}Sc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:kc(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:kc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Ec(t){this._context=t}Ec.prototype={areaStart:Ac,areaEnd:Ac,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:kc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Uc(t){this._context=t}Uc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:kc(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};function Lc(t,n){this._basis=new Sc(t),this._beta=n}Lc.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],a=n[0],f=t[e]-i,o=n[e]-a,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*f),this._beta*n[c]+(1-this._beta)*(a+r*o));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};(function t(n){function e(t){return 1===n?new Sc(t):new Lc(t,n)}return e.beta=function(n){return t(+n)},e})(.85);function Pc(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function Rc(t,n){this._context=t,this._k=(1-n)/6}Rc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Pc(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Rc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Dc(t,n){this._context=t,this._k=(1-n)/6}Dc.prototype={areaStart:Ac,areaEnd:Ac,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new Dc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function jc(t,n){this._context=t,this._k=(1-n)/6}jc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Pc(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return new jc(t,n)}return e.tension=function(n){return t(+n)},e})(0);function Fc(t,n,e){var r=t._x1,i=t._y1,a=t._x2,f=t._y2;if(t._l01_a>gc){var o=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*o-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*o-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>gc){var u=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);a=(a*u+t._x1*t._l23_2a-n*t._l12_2a)/s,f=(f*u+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,a,f,t._x2,t._y2)}function Hc(t,n){this._context=t,this._alpha=n}Hc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Fc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Hc(t,n):new Rc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Oc(t,n){this._context=t,this._alpha=n}Oc.prototype={areaStart:Ac,areaEnd:Ac,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Fc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Oc(t,n):new Dc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function Yc(t,n){this._context=t,this._alpha=n}Yc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Fc(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};(function t(n){function e(t){return n?new Yc(t,n):new jc(t,0)}return e.alpha=function(n){return t(+n)},e})(.5);function qc(t){this._context=t}qc.prototype={areaStart:Ac,areaEnd:Ac,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};function Ic(t){return t<0?-1:1}function zc(t,n,e){var r=t._x1-t._x0,i=n-t._x1,a=(t._y1-t._y0)/(r||i<0&&-0),f=(e-t._y1)/(i||r<0&&-0),o=(a*i+f*r)/(r+i);return(Ic(a)+Ic(f))*Math.min(Math.abs(a),Math.abs(f),.5*Math.abs(o))||0}function $c(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Bc(t,n,e){var r=t._x0,i=t._y0,a=t._x1,f=t._y1,o=(a-r)/3;t._context.bezierCurveTo(r+o,i+o*n,a-o,f-o*e,a,f)}function Xc(t){this._context=t}function Vc(t){this._context=new Zc(t)}function Zc(t){this._context=t}function Wc(t){this._context=t}function Jc(t){var n,e,r=t.length-1,i=new Array(r),a=new Array(r),f=new Array(r);for(i[0]=0,a[0]=2,f[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,a[n]=4,f[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,a[r-1]=7,f[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/a[n-1],a[n]-=e,f[n]-=e*f[n-1];for(i[r-1]=f[r-1]/a[r-1],n=r-2;n>=0;--n)i[n]=(f[n]-i[n+1])/a[n];for(a[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)a[n]=2*t[n+1]-i[n+1];return[i,a]}Xc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Bc(this,this._t0,$c(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Bc(this,$c(this,e=zc(this,t,n)),e);break;default:Bc(this,this._t0,e=zc(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Vc.prototype=Object.create(Xc.prototype)).point=function(t,n){Xc.prototype.point.call(this,n,t)},Zc.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,a){this._context.bezierCurveTo(n,t,r,e,a,i)}},Wc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Jc(t),i=Jc(n),a=0,f=1;f<e;++a,++f)this._context.bezierCurveTo(r[0][a],i[0][a],r[1][a],i[1][a],t[f],n[f]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};function Qc(t,n){this._context=t,this._t=n}Qc.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};function Gc(){this._=null}function Kc(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function tu(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function nu(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function eu(t){for(;t.L;)t=t.L;return t}Gc.prototype={constructor:Gc,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=eu(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(tu(this,e),e=(t=e).U),e.C=!1,r.C=!0,nu(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(nu(this,e),e=(t=e).U),e.C=!1,r.C=!0,tu(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,f=t.R;if(e=a?f?eu(f):a:f,i?i.L===t?i.L=e:i.R=e:this._=e,a&&f?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==f?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=f,f.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,tu(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,nu(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,tu(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,nu(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,tu(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,nu(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var ru=Gc;function iu(t,n,e,r){var i=[null,null],a=ku.push(i)-1;return i.left=t,i.right=n,e&&fu(i,t,n,e),r&&fu(i,n,t,r),Cu[t.index].halfedges.push(a),Cu[n.index].halfedges.push(a),i}function au(t,n,e){var r=[n,e];return r.left=t,r}function fu(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function ou(t,n,e,r,i){var a,f=t[0],o=t[1],c=f[0],u=f[1],s=0,h=1,l=o[0]-c,d=o[1]-u;if(a=n-c,l||!(a>0)){if(a/=l,l<0){if(a<s)return;a<h&&(h=a)}else if(l>0){if(a>h)return;a>s&&(s=a)}if(a=r-c,l||!(a<0)){if(a/=l,l<0){if(a>h)return;a>s&&(s=a)}else if(l>0){if(a<s)return;a<h&&(h=a)}if(a=e-u,d||!(a>0)){if(a/=d,d<0){if(a<s)return;a<h&&(h=a)}else if(d>0){if(a>h)return;a>s&&(s=a)}if(a=i-u,d||!(a<0)){if(a/=d,d<0){if(a>h)return;a>s&&(s=a)}else if(d>0){if(a<s)return;a<h&&(h=a)}return!(s>0||h<1)||(s>0&&(t[0]=[c+s*l,u+s*d]),h<1&&(t[1]=[c+h*l,u+h*d]),!0)}}}}}function cu(t,n,e,r,i){var a=t[1];if(a)return!0;var f,o,c=t[0],u=t.left,s=t.right,h=u[0],l=u[1],d=s[0],_=s[1],b=(h+d)/2,p=(l+_)/2;if(_===l){if(b<n||b>=r)return;if(h>d){if(c){if(c[1]>=i)return}else c=[b,e];a=[b,i]}else{if(c){if(c[1]<e)return}else c=[b,i];a=[b,e]}}else if(o=p-(f=(h-d)/(_-l))*b,f<-1||f>1)if(h>d){if(c){if(c[1]>=i)return}else c=[(e-o)/f,e];a=[(i-o)/f,i]}else{if(c){if(c[1]<e)return}else c=[(i-o)/f,i];a=[(e-o)/f,e]}else if(l<_){if(c){if(c[0]>=r)return}else c=[n,f*n+o];a=[r,f*r+o]}else{if(c){if(c[0]<n)return}else c=[r,f*r+o];a=[n,f*n+o]}return t[0]=c,t[1]=a,!0}function uu(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function su(t,n){return n[+(n.left!==t.site)]}function hu(t,n){return n[+(n.left===t.site)]}var lu,du=[];function _u(){Kc(this),this.x=this.y=this.arc=this.site=this.cy=null}function bu(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,a=e.site;if(r!==a){var f=i[0],o=i[1],c=r[0]-f,u=r[1]-o,s=a[0]-f,h=a[1]-o,l=2*(c*h-u*s);if(!(l>=-Eu)){var d=c*c+u*u,_=s*s+h*h,b=(h*d-u*_)/l,p=(c*_-s*d)/l,y=du.pop()||new _u;y.arc=t,y.site=i,y.x=b+f,y.y=(y.cy=p+o)+Math.sqrt(b*b+p*p),t.circle=y;for(var v=null,g=Au._;g;)if(y.y<g.y||y.y===g.y&&y.x<=g.x){if(!g.L){v=g.P;break}g=g.L}else{if(!g.R){v=g;break}g=g.R}Au.insert(v,y),v||(lu=y)}}}}function pu(t){var n=t.circle;n&&(n.P||(lu=n.N),Au.remove(n),du.push(n),Kc(n),t.circle=null)}var yu=[];function vu(){Kc(this),this.edge=this.site=this.circle=null}function gu(t){var n=yu.pop()||new vu;return n.site=t,n}function mu(t){pu(t),Tu.remove(t),yu.push(t),Kc(t)}function xu(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],a=t.P,f=t.N,o=[t];mu(t);for(var c=a;c.circle&&Math.abs(e-c.circle.x)<Su&&Math.abs(r-c.circle.cy)<Su;)a=c.P,o.unshift(c),mu(c),c=a;o.unshift(c),pu(c);for(var u=f;u.circle&&Math.abs(e-u.circle.x)<Su&&Math.abs(r-u.circle.cy)<Su;)f=u.N,o.push(u),mu(u),u=f;o.push(u),pu(u);var s,h=o.length;for(s=1;s<h;++s)u=o[s],c=o[s-1],fu(u.edge,c.site,u.site,i);c=o[0],(u=o[h-1]).edge=iu(c.site,u.site,null,i),bu(c),bu(u)}function wu(t){for(var n,e,r,i,a=t[0],f=t[1],o=Tu._;o;)if((r=Mu(o,f)-a)>Su)o=o.L;else{if(!((i=a-Nu(o,f))>Su)){r>-Su?(n=o.P,e=o):i>-Su?(n=o,e=o.N):n=e=o;break}if(!o.R){n=o;break}o=o.R}!function(t){Cu[t.index]={site:t,halfedges:[]}}(t);var c=gu(t);if(Tu.insert(n,c),n||e){if(n===e)return pu(n),e=gu(n.site),Tu.insert(c,e),c.edge=e.edge=iu(n.site,c.site),bu(n),void bu(e);if(e){pu(n),pu(e);var u=n.site,s=u[0],h=u[1],l=t[0]-s,d=t[1]-h,_=e.site,b=_[0]-s,p=_[1]-h,y=2*(l*p-d*b),v=l*l+d*d,g=b*b+p*p,m=[(p*v-d*g)/y+s,(l*g-b*v)/y+h];fu(e.edge,u,_,m),c.edge=iu(u,t,null,m),e.edge=iu(t,_,null,m),bu(n),bu(e)}else c.edge=iu(n.site,c.site)}}function Mu(t,n){var e=t.site,r=e[0],i=e[1],a=i-n;if(!a)return r;var f=t.P;if(!f)return-1/0;var o=(e=f.site)[0],c=e[1],u=c-n;if(!u)return o;var s=o-r,h=1/a-1/u,l=s/u;return h?(-l+Math.sqrt(l*l-2*h*(s*s/(-2*u)-c+u/2+i-a/2)))/h+r:(r+o)/2}function Nu(t,n){var e=t.N;if(e)return Mu(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Tu,Cu,Au,ku,Su=1e-6,Eu=1e-12;function Uu(t,n){return n[1]-t[1]||n[0]-t[0]}function Lu(t,n){var e,r,i,a=t.sort(Uu).pop();for(ku=[],Cu=new Array(t.length),Tu=new ru,Au=new ru;;)if(i=lu,a&&(!i||a[1]<i.y||a[1]===i.y&&a[0]<i.x))a[0]===e&&a[1]===r||(wu(a),e=a[0],r=a[1]),a=t.pop();else{if(!i)break;xu(i.arc)}if(function(){for(var t,n,e,r,i=0,a=Cu.length;i<a;++i)if((t=Cu[i])&&(r=(n=t.halfedges).length)){var f=new Array(r),o=new Array(r);for(e=0;e<r;++e)f[e]=e,o[e]=uu(t,ku[n[e]]);for(f.sort(function(t,n){return o[n]-o[t]}),e=0;e<r;++e)o[e]=n[f[e]];for(e=0;e<r;++e)n[e]=o[e]}}(),n){var f=+n[0][0],o=+n[0][1],c=+n[1][0],u=+n[1][1];!function(t,n,e,r){for(var i,a=ku.length;a--;)cu(i=ku[a],t,n,e,r)&&ou(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Su||Math.abs(i[0][1]-i[1][1])>Su)||delete ku[a]}(f,o,c,u),function(t,n,e,r){var i,a,f,o,c,u,s,h,l,d,_,b,p=Cu.length,y=!0;for(i=0;i<p;++i)if(a=Cu[i]){for(f=a.site,o=(c=a.halfedges).length;o--;)ku[c[o]]||c.splice(o,1);for(o=0,u=c.length;o<u;)_=(d=hu(a,ku[c[o]]))[0],b=d[1],h=(s=su(a,ku[c[++o%u]]))[0],l=s[1],(Math.abs(_-h)>Su||Math.abs(b-l)>Su)&&(c.splice(o,0,ku.push(au(f,d,Math.abs(_-t)<Su&&r-b>Su?[t,Math.abs(h-t)<Su?l:r]:Math.abs(b-r)<Su&&e-_>Su?[Math.abs(l-r)<Su?h:e,r]:Math.abs(_-e)<Su&&b-n>Su?[e,Math.abs(h-e)<Su?l:n]:Math.abs(b-n)<Su&&_-t>Su?[Math.abs(l-n)<Su?h:t,n]:null))-1),++u);u&&(y=!1)}if(y){var v,g,m,x=1/0;for(i=0,y=null;i<p;++i)(a=Cu[i])&&(m=(v=(f=a.site)[0]-t)*v+(g=f[1]-n)*g)<x&&(x=m,y=a);if(y){var w=[t,n],M=[t,r],N=[e,r],T=[e,n];y.halfedges.push(ku.push(au(f=y.site,w,M))-1,ku.push(au(f,M,N))-1,ku.push(au(f,N,T))-1,ku.push(au(f,T,w))-1)}}for(i=0;i<p;++i)(a=Cu[i])&&(a.halfedges.length||delete Cu[i])}(f,o,c,u)}this.edges=ku,this.cells=Cu,Tu=Au=ku=Cu=null}Lu.prototype={constructor:Lu,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return su(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(a=(i=e.halfedges).length)for(var i,a,f,o,c,u,s=e.site,h=-1,l=n[i[a-1]],d=l.left===s?l.right:l.left;++h<a;)f=d,d=(l=n[i[h]]).left===s?l.right:l.left,f&&d&&r<f.index&&r<d.index&&(c=f,u=d,((o=s)[0]-u[0])*(c[1]-o[1])-(o[0]-c[0])*(u[1]-o[1])<0)&&t.push([s.data,f.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,a=this,f=a._found||0,o=a.cells.length;!(i=a.cells[f]);)if(++f>=o)return null;var c=t-i.site[0],u=n-i.site[1],s=c*c+u*u;do{i=a.cells[r=f],f=null,i.halfedges.forEach(function(e){var r=a.edges[e],o=r.left;if(o!==i.site&&o||(o=r.right)){var c=t-o[0],u=n-o[1],h=c*c+u*u;h<s&&(s=h,f=o.index)}})}while(null!==f);return a._found=r,null==e||s<=e*e?i.site:null}};function Pu(t,n,e){this.k=t,this.x=n,this.y=e}Pu.prototype={constructor:Pu,scale:function(t){return 1===t?this:new Pu(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new Pu(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new Pu(1,0,0);Pu.prototype;e(1);function Ru(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,a=void 0;try{for(var f,o=t[Symbol.iterator]();!(r=(f=o.next()).done)&&(e.push(f.value),!n||e.length!==n);r=!0);}catch(t){i=!0,a=t}finally{try{r||null==o.return||o.return()}finally{if(i)throw a}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var Du=Bt("body").append("svg").attr("id","chart"),ju=new window.XMLHttpRequest;ju.addEventListener("load",function(){var t=ti(this.responseText).reduce(function(t,n){return t[n.Region]||(t[n.Region]=[]),t[n.Region].push(n),t},{});!function(t){Du.attr("width",window.innerWidth).attr("height",window.innerHeight);var n=nf().domain(t.map(function(t){return t.region})).rangeRound([50,window.innerWidth-50]).padding(.1),e=function t(){var n=df(ff,ff);return n.copy=function(){return hf(n,t())},Ja.apply(n,arguments),bf(n)}().domain([0,y(t,function(t){return t.meanPctTurnout})]).range([window.innerHeight-50,0]),r=E(N,a).scale(n),i=function(t){return E(T,t)}().scale(e);var a;Du.append("g").attr("class","axis").attr("transform","translate(0, ".concat(window.innerHeight-50,")")).call(r),Du.append("g").attr("class","axis").attr("transform","translate(50, 0)").call(i),Du.selectAll("rect").data(t).enter().append("rect").attr("class","bar").attr("x",function(t){return n(t.region)}).attr("y",window.innerHeight-50).attr("width",n.bandwidth()).attr("height",0).transition().delay(function(t,n){return 20*n}).duration(800).attr("y",function(t){return e(t.meanPctTurnout)}).attr("height",function(t){return window.innerHeight-50-e(t.meanPctTurnout)})}(Object.entries(t).map(function(t){var n=Ru(t,2),e=n[0],r=n[1];return{region:e,meanPctTurnout:v(r,function(t){return t.Pct_Turnout})}}))}),ju.open("GET","data/EU-referendum-result-data.csv"),ju.send()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,